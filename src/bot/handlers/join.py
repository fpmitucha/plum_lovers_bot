from __future__ import annotations
"""
–î–∏–∞–ª–æ–≥ ¬´–≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ PLS¬ª —Å –∞–≤—Ç–æ-–∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º –∑–∞—è–≤–∫–∏, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ —á–∞—Ç–µ.

–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ:
- –ê–Ω—Ç–∏-–¥—É–±–ª–∏–∫–∞—Ç slug (–±–µ–∑ –ø–∞–¥–µ–Ω–∏–π, –µ—Å–ª–∏ –º–µ—Ç–æ–¥ –≤ Repo –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç).
- ChatMemberStatus.CREATOR (–≤–º–µ—Å—Ç–æ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ OWNER).
- –û—Ç–ø—Ä–∞–≤–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è
  (–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ chat_member).
"""

import html
import logging
import contextlib
from datetime import datetime, timedelta, timezone
from pathlib import Path
from typing import Union

from aiogram import Router, F
from aiogram.enums import ParseMode, ChatMemberStatus
from aiogram.exceptions import TelegramBadRequest
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import (
    CallbackQuery,
    ChatInviteLink,
    ChatMemberAdministrator,
    ChatMemberUpdated,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    Message,
)
from aiogram.types.input_file import FSInputFile
from aiogram.utils.keyboard import InlineKeyboardBuilder
from sqlalchemy.ext.asyncio import AsyncSession, async_sessionmaker

from bot.config import settings
from bot.keyboards.common import AdminCB, JoinCB, admin_review_kb, CabCB
from bot.services.i18n import get_lang
from bot.utils.parsing import normalize_slug, parse_slug
from bot.utils.repo import Repo

router = Router(name="join")

# ---- –ë–ê–ù–ù–ï–†–´ ----
APPROVE_BANNER = {
    "ru": "./data/pls_approve_ru_banner_600x400.png",
    "en": "./data/pls_approve_en_banner_600x400.png",
}
DENY_BANNER = {
    "ru": "./data/pls_deny_ru_banner_600x400.png",
    "en": "./data/pls_deny_en_banner_600x400.png",
}
LINK_BANNER = "./data/pls_link_banner_600x400.png"
AFTER_LANG_BANNER = "./data/pls_afterchangelanguage_banner.png"

# ---- –¢–µ–∫—Å—Ç—ã –¥–ª—è –º–µ–Ω—é, –∫–æ—Ç–æ—Ä–æ–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è ----
_MENU_T = {
    "user_caption": {
        "ru": (
            "<b>–ü—Ä–∏–≤–µ—Ç!</b>\n"
            "–¢—ã –≤ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–º –±–æ—Ç–µ <b>–ö–ª—É–±–∞ –õ—é–±–∏—Ç–µ–ª–µ–π –°–ª–∏–≤–æ–≤</b>. "
            "–ó–¥–µ—Å—å –¥–æ–±—Ä–æ –ø—Ä–µ–≤—Ä–∞—â–∞–µ—Ç—Å—è –≤ –∑–Ω–∞–Ω–∏—è ‚Äî –¥–µ–ª–∏–º—Å—è –∫–æ–Ω—Å–ø–µ–∫—Ç–∞–º–∏, —Ä–∞–∑–±–æ—Ä–∞–º–∏ –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.\n\n"
            "–ß—Ç–æ –≤—ã–±–∏—Ä–∞–µ–º —Å–µ–≥–æ–¥–Ω—è? üëá"
        ),
        "en": (
            "<b>Hi!</b>\n"
            "You‚Äôre in the official bot of the <b>Plum Lovers Club</b>. "
            "Kindness turns into knowledge here ‚Äî we share notes, breakdowns, and support.\n\n"
            "What shall we choose today? üëá"
        ),
    },
    "btn_profile":  {"ru": "üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", "en": "üë§ Profile"},
    "btn_rules":    {"ru": "üß≠ –ü—Ä–∞–≤–∏–ª–∞",       "en": "üß≠ Rules"},
    "btn_a2t":      {"ru": "üîä –ê—É–¥–∏–æ –≤ —Ç–µ–∫—Å—Ç", "en": "üîä Audio to text"},
    "btn_gpt":      {"ru": "‚ö° Chat GPT 5",    "en": "‚ö° Chat GPT 5"},
    "btn_help":     {"ru": "‚ùì –ü–æ–º–æ—â—å",        "en": "‚ùì Help"},
    "btn_settings": {"ru": "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏",     "en": "‚öôÔ∏è Settings"},
}

def _user_menu_kb_join(lang: str) -> InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()
    kb.button(text=_MENU_T["btn_profile"][lang],  callback_data=CabCB(action="open").pack())
    kb.button(text=_MENU_T["btn_rules"][lang],    callback_data=f"start:rules:{lang}")
    kb.button(text=_MENU_T["btn_a2t"][lang],      callback_data=f"start:a2t:{lang}")
    kb.button(text=_MENU_T["btn_gpt"][lang],      callback_data=f"start:gpt:{lang}")
    kb.button(text=_MENU_T["btn_help"][lang],     callback_data=f"start:help:{lang}")
    kb.button(text=_MENU_T["btn_settings"][lang], callback_data=f"start:settings:{lang}")
    kb.adjust(2, 2, 2)
    return kb.as_markup()

# ---- FSM ----
class JoinStates(StatesGroup):
    waiting_slug = State()

class AdminStates(StatesGroup):
    waiting_deny_reason = State()

# ---- –£–¢–ò–õ–ò–¢–´ ----
def _resolve_photo_source(src: str) -> Union[str, FSInputFile]:
    s = (src or "").strip().strip('"').strip("'")
    if not s:
        raise ValueError("–ü—É—Å—Ç–æ–π –ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é")
    if s.startswith("file_id:"):
        return s.split("file_id:", 1)[1].strip()
    if s.startswith(("http://", "https://")):
        return s
    p = Path(s).expanduser()
    return FSInputFile(p) if p.exists() and p.is_file() else s

async def _is_already_in_target_chat(bot, user_id: int) -> bool:
    """True, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ —Ü–µ–ª–µ–≤–æ–º —á–∞—Ç–µ."""
    try:
        cm = await bot.get_chat_member(settings.TARGET_CHAT_ID, user_id)
        return cm.status in {
            ChatMemberStatus.MEMBER,
            ChatMemberStatus.ADMINISTRATOR,
            ChatMemberStatus.CREATOR,  # –≤–∞–∂–Ω–æ: CREATOR, –Ω–µ OWNER
        }
    except TelegramBadRequest:
        return False
    except Exception:
        return False

async def _revoke_active_invite(bot, repo: Repo, user_id: int) -> None:
    """–û—Ç–æ–∑–≤–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—É—é –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –µ—Å—Ç—å) –∏ —É–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å –∏–∑ –ë–î."""
    try:
        inv = await repo.get_active_invite(user_id)
    except Exception:
        inv = None
    if not inv:
        return
    try:
        await bot.revoke_chat_invite_link(settings.TARGET_CHAT_ID, inv.invite_link)
    except Exception:
        pass
    await repo.delete_invite(inv.id)

async def _close_admin_request_message(cb: CallbackQuery, notice: str | None = None) -> None:
    """
    –°–ø—Ä—è—Ç–∞—Ç—å ¬´–∫–∞—Ä—Ç–æ—á–∫—É¬ª –∑–∞—è–≤–∫–∏ –∏–∑ –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ —á–∞—Ç–∞:
    1) –ø—Ä–æ–±—É–µ–º —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ;
    2) –µ—Å–ª–∏ –Ω–µ–ª—å–∑—è ‚Äî —Å–Ω–∏–º–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É / –º–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç;
    3) –∑–∞–∫—Ä—ã–≤–∞–µ–º ¬´—á–∞—Å–∏–∫–∏¬ª –Ω–∞ –∫–Ω–æ–ø–∫–µ.
    """
    # 1) –£–¥–∞–ª–∏—Ç—å —Ü–µ–ª–∏–∫–æ–º
    with contextlib.suppress(Exception):
        await cb.message.delete()
        with contextlib.suppress(Exception):
            await cb.answer()
        return
    # 2) –ò–Ω–∞—á–µ ‚Äî —É–±—Ä–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏–ª–∏ –∑–∞–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç
    with contextlib.suppress(Exception):
        if notice:
            await cb.message.edit_text(notice, reply_markup=None)
        else:
            await cb.message.edit_reply_markup(reply_markup=None)
    # 3) –ó–∞–∫—Ä—ã—Ç—å —Å–ø–∏–Ω–Ω–µ—Ä
    with contextlib.suppress(Exception):
        await cb.answer()

# ---- HANDLERS: USER FLOW ----
@router.callback_query(JoinCB.filter(F.action == "start"))
async def on_join_click(cb: CallbackQuery, state: FSMContext) -> None:
    """–ü–µ—Ä–µ–≤–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –≤–≤–æ–¥ slug (–∏–∑ –ª—é–±–æ–π —Ç–æ—á–∫–∏)."""
    if cb.message.chat.type != "private":
        me = await cb.bot.get_me()
        pm_url = f"https://t.me/{me.username}?start=join"
        await cb.answer("–û—Ç–∫—Ä–æ–π—Ç–µ –±–æ—Ç–∞ –≤ –ª–∏—á–∫–µ, —è –ø—Ä–æ–¥–æ–ª–∂—É —Ç–∞–º.", show_alert=True)
        await cb.message.answer(
            "–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É:",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[[InlineKeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏ –≤ –õ–°", url=pm_url)]]
            ),
        )
        return

    await state.set_state(JoinStates.waiting_slug)
    await cb.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ (–Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º):\n"
        "<b>first-last-university-program-group-course-startyear</b>\n\n"
        "–ü—Ä–∏–º–µ—Ä: <code>ivan-ivanov-Harward-CSE-77-3-21</code>",
        parse_mode=ParseMode.HTML,
    )
    await cb.answer()

@router.message(JoinStates.waiting_slug)
async def on_slug_received(
    message: Message,
    state: FSMContext,
    session_maker: async_sessionmaker[AsyncSession],
) -> None:
    """
    –ü—Ä–∏–Ω–∏–º–∞–µ–º slug. –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ —á–∞—Ç–µ ‚Äî –∑–∞—è–≤–∫–∞ —Å—Ç–∞–≤–∏—Ç—Å—è –≤ done, –ø—Ä–æ—Ñ–∏–ª—å/roster —Å–æ–∑–¥–∞—é—Ç—Å—è,
    –∞–∫—Ç–∏–≤–Ω–∞—è —Å—Å—ã–ª–∫–∞ (–µ—Å–ª–∏ –±—ã–ª–∞) –æ—Ç–∑—ã–≤–∞–µ—Çc—è. –ò–Ω–∞—á–µ ‚Äî –æ–±—ã—á–Ω—ã–π –ø–æ—Ç–æ–∫ (–∑–∞—è–≤–∫–∞ pending).

    –ù–æ–≤–æ–µ: –µ—Å–ª–∏ –≤–≤–µ–¥—ë–Ω–Ω—ã–π slug –∑–∞–Ω—è—Ç –¥—Ä—É–≥–∏–º user_id, –∏ —ç—Ç–æ—Ç –≤–ª–∞–¥–µ–ª–µ—Ü —Ä–µ–∞–ª—å–Ω–æ –≤ —á–∞—Ç–µ ‚Äî
    –ø—Ä–µ—Ä—ã–≤–∞–µ–º –ø–æ—Ç–æ–∫ (–∞–Ω—Ç–∏-–¥—É–±–ª–∏–∫–∞—Ç) ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–∞ –¥–∞–∂–µ –µ—Å–ª–∏ –º–µ—Ç–æ–¥–∞ –≤ Repo –Ω–µ—Ç.
    """
    if message.chat.type != "private":
        me = await message.bot.get_me()
        pm_url = f"https://t.me/{me.username}?start=join"
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ –ª–∏—á–∫–µ —Å –±–æ—Ç–æ–º:",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[[InlineKeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏ –≤ –õ–°", url=pm_url)]]
            ),
        )
        return

    # –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º/–≤–∞–ª–∏–¥–∏—Ä—É–µ–º slug
    raw = (message.text or "").strip()
    try:
        normalized = normalize_slug(raw)
        parse_slug(normalized)
    except Exception as e:
        await message.answer(f"–§–æ—Ä–º–∞—Ç –Ω–µ –ø—Ä–∏–Ω—è—Ç: {e}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–ª–µ–Ω—Å—Ç–≤–æ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–∞—Ç–µ
    already_member = await _is_already_in_target_chat(message.bot, message.from_user.id)

    async with session_maker() as session:
        repo = Repo(session)

        # --- –∞–Ω—Ç–∏-–¥—É–±–ª–∏–∫–∞—Ç –ø–æ slug (–µ—Å–ª–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —É–º–µ–µ—Ç –∏—Å–∫–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ slug) ---
        owner = None
        if hasattr(repo, "get_profile_by_slug"):
            try:
                owner = await repo.get_profile_by_slug(normalized)  # type: ignore[attr-defined]
            except Exception:
                owner = None
        if owner and int(getattr(owner, "user_id", 0)) != message.from_user.id:
            if await _is_already_in_target_chat(message.bot, int(owner.user_id)):  # type: ignore[arg-type]
                ui = (get_lang(message.from_user.id) or "ru").lower()
                msg = {
                    "ru": (
                        "–£—á–∞—Å—Ç–Ω–∏–∫ —Å —Ç–∞–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏ —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ —á–∞—Ç–µ –ö–õ–°.\n"
                        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –∞–∫–∫–∞—É–Ω—Ç.\n\n"
                        "–ï—Å–ª–∏ —ç—Ç–æ –≤—ã, –ø—Ä–æ—Å—Ç–æ –æ—Ç–∫—Ä–æ–π—Ç–µ /menu ‚Äî ¬´–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç¬ª –¥–æ—Å—Ç—É–ø–µ–Ω."
                    ),
                    "en": (
                        "A member with these details is already in the PLC chat.\n"
                        "Please use only one account.\n\n"
                        "If this is you, just open /menu ‚Äî your Profile is available."
                    ),
                }[ui]
                await state.clear()
                await message.answer(msg)
                return

        # –ß—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫
        if await repo.blacklist_contains(message.from_user.id):
            await state.clear()
            await message.answer(
                "‚ùå –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —á—ë—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ. –í—Å—Ç—É–ø–ª–µ–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ.\n"
                "–ï—Å–ª–∏ —Å—á–∏—Ç–∞–µ—Ç–µ —ç—Ç–æ –æ—à–∏–±–∫–æ–π ‚Äî —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
            )
            return

        # –£–∂–µ –≤ —á–∞—Ç–µ ‚Üí —Å—Ä–∞–∑—É done, –ø—Ä–æ—Ñ–∏–ª—å, roster, –æ—Ç–∑—ã–≤ –∏–Ω–≤–∞–π—Ç–∞
        if already_member:
            app = await repo.add_application(
                user_id=message.from_user.id,
                username=message.from_user.username,
                slug=normalized,
            )
            await repo.set_application_status(app.id, status="done")
            await repo.ensure_profile(
                user_id=message.from_user.id,
                username=message.from_user.username,
                slug=normalized,
            )
            # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –∫–∞—Ä–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ
            await repo._ensure_karma_column()
            karma = await repo.get_karma(message.from_user.id)
            if karma == 10:  # –ï—Å–ª–∏ –∫–∞—Ä–º–∞ —Ä–∞–≤–Ω–∞ –∑–Ω–∞—á–µ–Ω–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –∑–Ω–∞—á–∏—Ç –≤—Å–µ –≤ –ø–æ—Ä—è–¥–∫–µ
                pass
            else:
                # –ï—Å–ª–∏ –∫–∞—Ä–º–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                await repo.set_karma(message.from_user.id, 10)
            try:
                await repo.add_to_roster(normalized)
            except Exception:
                pass
            await _revoke_active_invite(message.bot, repo, message.from_user.id)

            await state.clear()
            lang = get_lang(message.from_user.id) or "ru"
            msg = {
                "ru": "–í—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ —á–∞—Ç–µ. –ó–∞—è–≤–∫–∞ –æ—Ç–º–µ—á–µ–Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π ‚úÖ\n–û—Ç–∫—Ä–æ–π—Ç–µ /menu ‚Äî ¬´–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç¬ª –¥–æ—Å—Ç—É–ø–µ–Ω.",
                "en": "You are already in the chat. Your application has been marked done ‚úÖ\nOpen /menu ‚Äî your Profile is available.",
            }[lang]
            await message.answer(msg)
            return

        # --- –û–±—ã—á–Ω—ã–π –ø–æ—Ç–æ–∫, –µ—Å–ª–∏ –µ—â—ë –Ω–µ –≤ —á–∞—Ç–µ ---
        if await repo.roster_contains(normalized):
            await state.clear()
            await message.answer(
                "–ü–æ –Ω–∞—à–µ–π –±–∞–∑–µ –≤—ã —É–∂–µ —á–∏—Å–ª–∏—Ç–µ—Å—å –≤ –≥—Ä—É–ø–ø–µ. –ï—Å–ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–∞ ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ –∞–¥–º–∏–Ω—É."
            )
            return

        if await repo.get_active_invite(message.from_user.id):
            await state.clear()
            await message.answer(
                "–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ. "
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è ‚Äî –æ–Ω–∞ –≤—Å—ë –µ—â—ë –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞."
            )
            return

        if await repo.has_active_application(message.from_user.id):
            await state.clear()
            await message.answer("–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞—è–≤–∫–∞. –î–æ–∂–¥–∏—Ç–µ—Å—å —Ä–µ—à–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return

        # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É (pending) –∏ —É–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤
        app = await repo.add_application(
            user_id=message.from_user.id,
            username=message.from_user.username,
            slug=normalized,
        )

        mention = f"@{message.from_user.username}" if message.from_user.username else f"id:{message.from_user.id}"
        text = (
            "üìù –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ\n\n"
            f"<b>Slug:</b> <code>{html.escape(normalized)}</code>\n"
            f"<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> <code>{html.escape(mention)}</code>\n"
            f"<b>Telegram ID:</b> <code>{message.from_user.id}</code>\n"
            f"<b>ID –∑–∞—è–≤–∫–∏:</b> <code>{app.id}</code>"
        )

        targets: list[int] = []
        admin_notify_chat_id = getattr(settings, "ADMIN_NOTIFY_CHAT_ID", None)
        if admin_notify_chat_id:
            targets.append(int(admin_notify_chat_id))
        targets.extend(settings.ADMIN_USER_IDS)

        for admin_id in targets:
            try:
                await message.bot.send_message(
                    chat_id=admin_id,
                    text=text,
                    parse_mode=ParseMode.HTML,
                    reply_markup=admin_review_kb(app.id).as_markup(),
                )
            except Exception:
                logging.getLogger("innopls-bot").warning("–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å %s", admin_id)

        await state.clear()
        lang = get_lang(message.from_user.id) or "ru"
        ok_text = {
            "ru": "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É ‚úÖ",
            "en": "Your application has been sent to the administrator for review ‚úÖ",
        }[lang]
        await message.answer(ok_text)

# ---- HANDLERS: ADMIN APPROVE/DENY ----
@router.callback_query(AdminCB.filter(F.action == "approve"))
async def on_admin_approved(
    cb: CallbackQuery,
    callback_data: AdminCB,
    session_maker: async_sessionmaker[AsyncSession],
) -> None:
    """
    –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ —á–∞—Ç–µ ‚Äî —Å—Ä–∞–∑—É —Å—Ç–∞–≤–∏–º done, —Å–æ–∑–¥–∞—ë–º –ø—Ä–æ—Ñ–∏–ª—å/roster,
    –æ—Ç–∑—ãÃÅ–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –∏ —à–ª—ë–º –µ–º—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –±–µ–∑ ¬´–ø—Ä–∞–≤–∏–ª¬ª.
    –ò–Ω–∞—á–µ ‚Äî –æ–±—ã—á–Ω—ã–π –ø–æ—Ç–æ–∫: —Å—Ç–∞—Ç—É—Å approved –∏ –∫–∞—Ä—Ç–æ—á–∫–∞ —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏.

    –í –ª—é–±–æ–º —Å–ª—É—á–∞–µ —Ç–µ–∫—É—â–∞—è ¬´–∫–∞—Ä—Ç–æ—á–∫–∞¬ª –∑–∞—è–≤–∫–∏ —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å–∫—Ä—ã–≤–∞–µ—Ç—Å—è.
    """
    app_id = int(callback_data.app_id or 0)
    async with session_maker() as session:
        repo = Repo(session)
        app = await repo.get_application(app_id)
        if not app:
            await _close_admin_request_message(cb, "–ó–∞—è–≤–∫–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return

        # –µ—Å–ª–∏ —É–∂–µ –Ω–µ pending ‚Äî –ø—Ä–æ—Å—Ç–æ –∑–∞–∫—Ä—ã—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É
        if (app.status or "").lower() != "pending":
            await _close_admin_request_message(cb)
            return

        already_member = await _is_already_in_target_chat(cb.bot, app.user_id)

        if already_member:
            await repo.set_application_status(app_id, status="done")
            await repo.ensure_profile(user_id=app.user_id, username=app.username, slug=app.slug)
            # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –∫–∞—Ä–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ
            await repo._ensure_karma_column()
            karma = await repo.get_karma(app.user_id)
            if karma != 10:  # –ï—Å–ª–∏ –∫–∞—Ä–º–∞ –Ω–µ —Ä–∞–≤–Ω–∞ –∑–Ω–∞—á–µ–Ω–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                await repo.set_karma(app.user_id, 10)
            with contextlib.suppress(Exception):
                await repo.add_to_roster(app.slug)
            await _revoke_active_invite(cb.bot, repo, app.user_id)

            # —É–≤–µ–¥–æ–º–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            lang = get_lang(app.user_id) or "ru"
            msg = {
                "ru": "–ó–∞—è–≤–∫–∞ –æ—Ç–º–µ—á–µ–Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π: –≤—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ —á–∞—Ç–µ ‚úÖ\n–û—Ç–∫—Ä–æ–π—Ç–µ /menu ‚Äî ¬´–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç¬ª –¥–æ—Å—Ç—É–ø–µ–Ω.",
                "en": "Your application has been marked done: you are already in the chat ‚úÖ\nOpen /menu ‚Äî your Profile is available.",
            }[lang]
            with contextlib.suppress(Exception):
                await cb.bot.send_message(chat_id=app.user_id, text=msg)

            await _close_admin_request_message(cb)
            return

        # ---- –æ–±—ã—á–Ω—ã–π approve ----
        await repo.set_application_status(app_id, status="approved")

    lang = get_lang(app.user_id) or "ru"
    caption = {
        "ru": (
            "‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n\n"
            f"–ü—Ä–µ–∂–¥–µ —á–µ–º –≤—Å—Ç—É–ø–∏—Ç—å, –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å–æ —Å–≤–æ–¥–æ–º –ø—Ä–∞–≤–∏–ª:\n{html.escape(settings.RULES_URL)}\n\n"
            "<b><u>–í—Å—Ç—É–ø–∞–π—Ç–µ —Ç–æ–ª—å–∫–æ —Å —ç—Ç–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞, –≤ –∫–æ—Ç–æ—Ä—ã–π –±–æ—Ç –æ—Ç–ø—Ä–∞–≤–∏–ª —Å—Å—ã–ª–∫—É, –∏–Ω–∞—á–µ –±—É–¥–µ—Ç–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–µ—Å–µ–¥–µ.</u></b>\n\n"
            "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, –µ—Å–ª–∏ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç–µ –ø—Ä–∞–≤–∏–ª–∞.\n\n\n\n"
            "<i>–ü—Ä–∏–Ω–∏–º–∞—è –ø—Ä–∞–≤–∏–ª–∞, –≤—ã —Ä–∞–∑—Ä–µ—à–∞–µ—Ç–µ –±–æ—Ç—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞</i>"
        ),
        "en": (
            "‚úÖ Your application has been approved.\n\n"
            f"Before joining, please read our rules:\n{html.escape(settings.RULES_URL)}\n\n"
            "<b><u>Join only from this account that received the link, otherwise you will be blocked in the chat.</u></b>\n\n"
            "Press the button below if you accept the rules.\n\n\n\n"
            "<i>By accepting the rules, you allow the bot to send advertising messages</i>"
        ),
    }[lang]

    kb = InlineKeyboardMarkup(
        inline_keyboard=[[
            InlineKeyboardButton(
                text={"ru": "–ü—Ä–∏–Ω–∏–º–∞—é –ø—Ä–∞–≤–∏–ª–∞", "en": "I accept the rules"}[lang],
                callback_data=JoinCB(action="accept_rules", app_id=str(app_id)).pack(),
            )
        ]]
    )

    with contextlib.suppress(Exception):
        await cb.bot.send_photo(
            chat_id=app.user_id,
            photo=_resolve_photo_source(APPROVE_BANNER[lang]),
            caption=caption,
            parse_mode=ParseMode.HTML,
            reply_markup=kb,
        )

    # —Å–∫—Ä—ã–≤–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É —É –Ω–∞–∂–∞–≤—à–µ–≥–æ –∞–¥–º–∏–Ω–∞
    await _close_admin_request_message(cb)

@router.callback_query(AdminCB.filter(F.action == "deny"))
async def on_admin_deny_click(
    cb: CallbackQuery,
    callback_data: AdminCB,
    state: FSMContext,
    session_maker: async_sessionmaker[AsyncSession],
) -> None:
    """
    –û—Ç–∫–∞–∑ –ø–æ –∑–∞—è–≤–∫–µ: –∫–∞—Ä—Ç–æ—á–∫–∞ —Å—Ä–∞–∑—É —Å–∫—Ä—ã–≤–∞–µ—Ç—Å—è —É –∞–¥–º–∏–Ω–∞, –∑–∞—Ç–µ–º —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–∏—á–∏–Ω—É.
    """
    app_id = int(callback_data.app_id or 0)
    async with session_maker() as session:
        repo = Repo(session)
        app = await repo.get_application(app_id)
        if not app:
            await _close_admin_request_message(cb, "–ó–∞—è–≤–∫–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return
        # –µ—Å–ª–∏ —É–∂–µ –Ω–µ pending ‚Äî –ø—Ä–æ—Å—Ç–æ –∑–∞–∫—Ä—ã—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É
        if (app.status or "").lower() != "pending":
            await _close_admin_request_message(cb)
            return

    # –ø—Ä—è—á–µ–º –∫–∞—Ä—Ç–æ—á–∫—É —Å—Ä–∞–∑—É
    await _close_admin_request_message(cb)

    await state.set_state(AdminStates.waiting_deny_reason)
    await state.update_data(app_id=app_id)
    await cb.message.answer(
        "‚úã –û—Ç–∫–∞–∑ –ø–æ –∑–∞—è–≤–∫–µ.\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º <b>–ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–∞–∑–∞</b> –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\n"
        "–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–µ–∑ –ø—Ä–∏—á–∏–Ω—ã ‚Äî –ø—Ä–∏—à–ª–∏—Ç–µ –¥–µ—Ñ–∏—Å ¬´-¬ª.",
        parse_mode=ParseMode.HTML,
    )

@router.message(AdminStates.waiting_deny_reason)
async def on_admin_deny_reason(
    message: Message,
    state: FSMContext,
    session_maker: async_sessionmaker[AsyncSession],
) -> None:
    data = await state.get_data()
    app_id = int(data.get("app_id") or 0)
    reason_raw = (message.text or "").strip()
    reason_to_save = None if reason_raw in {"", "-", "‚Äî"} else reason_raw

    async with session_maker() as session:
        repo = Repo(session)
        app = await repo.get_application(app_id)
        if not app:
            await message.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –û—Ç–º–µ–Ω–∞.")
            await state.clear()
            return

        await repo.set_application_status(app_id, status="rejected", reason=reason_to_save)

        lang = get_lang(app.user_id) or "ru"
        caption = {
            "ru": "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n\n<i>–ü—Ä–∏—á–∏–Ω–∞:</i>\n{reason}",
            "en": "Your application was rejected by an administrator.\n\n<i>Reason:</i>\n{reason}",
        }[lang].format(reason=html.escape(reason_raw) if reason_to_save else "‚Äî")

        with contextlib.suppress(Exception):
            await message.bot.send_photo(
                chat_id=app.user_id,
                photo=_resolve_photo_source(DENY_BANNER[lang]),
                caption=caption,
                parse_mode=ParseMode.HTML,
            )

    await state.clear()
    await message.answer("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ‚úÖ")

# ---- HANDLERS: USER ACCEPT RULES ----
@router.callback_query(JoinCB.filter(F.action == "accept_rules"))
async def on_rules_accepted(
    cb: CallbackQuery,
    callback_data: JoinCB,
    session_maker: async_sessionmaker[AsyncSession],
) -> None:
    """
    –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ —á–∞—Ç–µ ‚Äî –ø–æ–º–µ—á–∞–µ–º –∑–∞—è–≤–∫—É –∫–∞–∫ done,
    —Å–æ–∑–¥–∞—ë–º –ø—Ä–æ—Ñ–∏–ª—å/roster, –æ—Ç–∑—ãÃÅ–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Å—Å—ã–ª–∫—É –∏ –Ω–µ —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é.
    –ò–Ω–∞—á–µ ‚Äî –æ–±—ã—á–Ω–∞—è –≤—ã–¥–∞—á–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏.
    """
    app_id = int(callback_data.app_id or 0)

    # —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞ –≤ —á–∞—Ç–µ (–∫–∞–∫ —Ä–∞–Ω—å—à–µ)
    try:
        me = await cb.bot.get_me()
        cm = await cb.bot.get_chat_member(settings.TARGET_CHAT_ID, me.id)
    except TelegramBadRequest:
        await cb.message.answer("‚ùå –ù–µ –≤–∏–∂—É —Ü–µ–ª–µ–≤–æ–π —á–∞—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ TARGET_CHAT_ID –∏ —á—Ç–æ –±–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ —á–∞—Ç.")
        await cb.answer()
        return

    if cm.status != "administrator":
        await cb.message.answer("‚ùå –ë–æ—Ç –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –≤ —Ü–µ–ª–µ–≤–æ–º —á–∞—Ç–µ. –í—ã–¥–∞–π—Ç–µ –ø—Ä–∞–≤–æ ¬´–ü—Ä–∏–≥–ª–∞—à–∞—Ç—å –ø–æ —Å—Å—ã–ª–∫–µ¬ª.")
        await cb.answer()
        return
    if isinstance(cm, ChatMemberAdministrator):
        if hasattr(cm, "can_invite_users") and not cm.can_invite_users:
            await cb.message.answer("‚ùå –£ –±–æ—Ç–∞ –Ω–µ—Ç –ø—Ä–∞–≤–∞ ¬´–ü—Ä–∏–≥–ª–∞—à–∞—Ç—å –ø–æ —Å—Å—ã–ª–∫–µ¬ª. –í–∫–ª—é—á–∏—Ç–µ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ.")
            await cb.answer()
            return

    async with session_maker() as session:
        repo = Repo(session)
        app = await repo.get_application(app_id)
        if not app or app.user_id != cb.from_user.id:
            await cb.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º.", show_alert=True)
            return

        # –£–∂–µ –≤ —á–∞—Ç–µ? -> done, –±–µ–∑ —Å—Å—ã–ª–∫–∏
        if await _is_already_in_target_chat(cb.bot, app.user_id):
            await repo.set_application_status(app_id, status="done")
            await repo.ensure_profile(user_id=app.user_id, username=app.username, slug=app.slug)
            # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –∫–∞—Ä–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ
            await repo._ensure_karma_column()
            karma = await repo.get_karma(app.user_id)
            if karma != 10:  # –ï—Å–ª–∏ –∫–∞—Ä–º–∞ –Ω–µ —Ä–∞–≤–Ω–∞ –∑–Ω–∞—á–µ–Ω–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                await repo.set_karma(app.user_id, 10)
            with contextlib.suppress(Exception):
                await repo.add_to_roster(app.slug)
            await _revoke_active_invite(cb.bot, repo, app.user_id)

            lang = get_lang(app.user_id) or "ru"
            msg = {
                "ru": "–í—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ —á–∞—Ç–µ ‚Äî –∑–∞—è–≤–∫–∞ –æ—Ç–º–µ—á–µ–Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π ‚úÖ\n–û—Ç–∫—Ä–æ–π—Ç–µ /menu.",
                "en": "You are already in the chat ‚Äî application marked done ‚úÖ\nOpen /menu.",
            }[lang]
            await cb.message.answer(msg)
            await cb.answer()
            return

        # –æ–±—ã—á–Ω–∞—è –ª–æ–≥–∏–∫–∞: –∑–∞–¥–∞—ë–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
        if await repo.has_active_invite(cb.from_user.id):
            await cb.message.answer("–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è.")
            await cb.answer()
            return

        expire_dt = datetime.now(timezone.utc) + timedelta(hours=24)
        try:
            link: ChatInviteLink = await cb.bot.create_chat_invite_link(
                chat_id=settings.TARGET_CHAT_ID,
                name=f"PLS for {cb.from_user.id}",
                member_limit=1,
                expire_date=expire_dt,
                creates_join_request=False,
            )
        except TelegramBadRequest as e:
            hint = "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –±–æ—Ç–∞ –Ω–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∞–º–∏ –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å TARGET_CHAT_ID."
            await cb.message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É.\n{e}\n\n{hint}")
            await cb.answer()
            return

        await repo.add_invite(
            user_id=cb.from_user.id,
            chat_id=settings.TARGET_CHAT_ID,
            invite_link=link.invite_link,
            expires_at=expire_dt.strftime("%Y-%m-%d %H:%M:%S"),
        )
        await repo.set_application_status(app_id, status="done")

    # –∫–∞—Ä—Ç–æ—á–∫–∞ —Å–æ —Å—Å—ã–ª–∫–æ–π
    lang = get_lang(cb.from_user.id) or "ru"
    caption = {
        "ru": (
            "–û—Ç–ª–∏—á–Ω–æ! –í–æ—Ç –≤–∞—à–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ "
            "(–¥–µ–π—Å—Ç–≤—É–µ—Ç 24 —á–∞—Å–∞ –∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–∞—Å):\n"
            f"{html.escape(link.invite_link)}\n\n"
            "–ü–æ—Å–ª–µ –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–æ–π–¥—ë—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏."
        ),
        "en": (
            "Great! Here is your personal invite link "
            "(valid for 24 hours and only for you):\n"
            f"{html.escape(link.invite_link)}\n\n"
            "After joining, verification will happen automatically."
        ),
    }[lang]

    with contextlib.suppress(Exception):
        await cb.message.answer_photo(
            photo=_resolve_photo_source(LINK_BANNER),
            caption=caption,
            parse_mode=ParseMode.HTML,
        )

    await cb.answer()

# ---- –°–õ–£–®–ê–ï–ú –§–ê–ö–¢–ò–ß–ï–°–ö–û–ï –í–°–¢–£–ü–õ–ï–ù–ò–ï –í –ß–ê–¢ ----
@router.chat_member()
async def on_member_joined_target_chat(
    ev: ChatMemberUpdated,
    session_maker: async_sessionmaker[AsyncSession],
) -> None:
    """–ö–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–µ–∞–ª—å–Ω–æ –≤—Å—Ç—É–ø–∏–ª –≤ —Ü–µ–ª–µ–≤–æ–π —á–∞—Ç ‚Äî —à–ª—ë–º –µ–º—É –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (user)."""
    # –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç —Ç–æ–ª—å–∫–æ —Ü–µ–ª–µ–≤–æ–π —á–∞—Ç
    if int(ev.chat.id) != int(settings.TARGET_CHAT_ID):
        return

    user = ev.new_chat_member.user
    if user.is_bot:
        return

    new_status = ev.new_chat_member.status
    if new_status not in {ChatMemberStatus.MEMBER, ChatMemberStatus.ADMINISTRATOR, ChatMemberStatus.CREATOR}:
        return  # –Ω–µ —Å–æ–±—ã—Ç–∏–µ ¬´–≤—Å—Ç—É–ø–∏–ª¬ª

    # –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Ñ–∏–ª—å –∏ –ø–æ–¥—Ç—è–≥–∏–≤–∞–µ–º slug –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞—è–≤–∫–∏ (–µ—Å–ª–∏ –±—ã–ª–∞)
    async with session_maker() as s:
        repo = Repo(s)
        last_app = await repo.get_last_application_for_user(user.id)
        slug = getattr(last_app, "slug", None) if last_app else None
        await repo.ensure_profile(user_id=user.id, username=user.username, slug=slug)
        # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –∫–∞—Ä–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ
        await repo._ensure_karma_column()
        karma = await repo.get_karma(user.id)
        if karma != 10:  # –ï—Å–ª–∏ –∫–∞—Ä–º–∞ –Ω–µ —Ä–∞–≤–Ω–∞ –∑–Ω–∞—á–µ–Ω–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            await repo.set_karma(user.id, 10)

    lang = (get_lang(user.id) or "ru").lower()
    with contextlib.suppress(TelegramBadRequest):
        await ev.bot.send_photo(
            chat_id=user.id,
            photo=_resolve_photo_source(AFTER_LANG_BANNER),
            caption=_MENU_T["user_caption"]["en" if lang == "en" else "ru"],
            parse_mode=ParseMode.HTML,
            reply_markup=_user_menu_kb_join("en" if lang == "en" else "ru"),
        )
