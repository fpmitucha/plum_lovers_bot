"""
–î–∏–∞–ª–æ–≥ ¬´–≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ PLS¬ª –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

–®–∞–≥–∏:
1) ¬´–í—Å—Ç—É–ø–∏—Ç—å –≤ PLS¬ª ‚Äî –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ slug –≤ —Ñ–æ—Ä–º–∞—Ç–µ.
2) –í–∞–ª–∏–¥–∏—Ä—É–µ–º slug.
3) –ü—Ä–æ–≤–µ—Ä—è–µ–º:
   - —á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫,
   - —É–∂–µ –≤ —Ä–µ–µ—Å—Ç—Ä–µ (roster),
   - –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –∏–Ω–≤–∞–π—Ç,
   - –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞—è–≤–∫–∞.
4) –ï—Å–ª–∏ –≤—Å—ë —á–∏—Å—Ç–æ ‚Äî —Å–æ–∑–¥–∞—ë–º –∑–∞—è–≤–∫—É, —É–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤.
5) –ê–¥–º–∏–Ω: Approve -> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —É—Ö–æ–¥–∏—Ç –∫–∞—Ä—Ç–æ—á–∫–∞ —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –∏ –±–∞–Ω–Ω–µ—Ä–æ–º.
6) –ê–¥–º–∏–Ω: Deny -> –∞–¥–º–∏–Ω –≤–≤–æ–¥–∏—Ç –ø—Ä–∏—á–∏–Ω—É, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —É—Ö–æ–¥–∏—Ç –∫–∞—Ä—Ç–æ—á–∫–∞ –æ—Ç–∫–∞–∑–∞ —Å –ø—Ä–∏—á–∏–Ω–æ–π –∏ –±–∞–Ω–Ω–µ—Ä–æ–º.
7) –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∂–º—ë—Ç ¬´–ü—Ä–∏–Ω–∏–º–∞—é –ø—Ä–∞–≤–∏–ª–∞¬ª ‚Äî —Å–æ–∑–¥–∞—ë–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∏–Ω–≤–∞–π—Ç (1 —á–µ–ª., 24—á)
   –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É —Å–æ —Å—Å—ã–ª–∫–æ–π –∏ –±–∞–Ω–Ω–µ—Ä–æ–º.
"""

from __future__ import annotations

import html
import logging
from datetime import datetime, timedelta, timezone
from pathlib import Path
from typing import Union

from aiogram import Router, F
from aiogram.enums import ParseMode
from aiogram.exceptions import TelegramBadRequest
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import (
    CallbackQuery,
    ChatInviteLink,
    ChatMemberAdministrator,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    Message,
)
from aiogram.types.input_file import FSInputFile

from sqlalchemy.ext.asyncio import AsyncSession, async_sessionmaker

from bot.config import settings
from bot.keyboards.common import AdminCB, JoinCB, admin_review_kb
from bot.services.i18n import get_lang
from bot.utils.parsing import normalize_slug, parse_slug
from bot.utils.repo import Repo, now_str

router = Router(name="join")

# ---- –ë–ê–ù–ù–ï–†–´ –î–õ–Ø –°–û–û–ë–©–ï–ù–ò–ô –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Æ ----
APPROVE_BANNER = {
    "ru": "./data/pls_approve_ru_banner_600x400.png",
    "en": "./data/pls_approve_en_banner_600x400.png",
}
DENY_BANNER = {
    "ru": "./data/pls_deny_ru_banner_600x400.png",
    "en": "./data/pls_deny_en_banner_600x400.png",
}
LINK_BANNER = "./data/pls_link_banner_600x400.png"


# ---- FSM ----
class JoinStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è."""
    waiting_slug = State()


class AdminStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –∞–¥–º–∏–Ω–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏ (–æ–∂–∏–¥–∞–Ω–∏–µ –ø—Ä–∏—á–∏–Ω—ã)."""
    waiting_deny_reason = State()


# ---- –£–¢–ò–õ–ò–¢–´ ----
def _resolve_photo_source(src: str) -> Union[str, FSInputFile]:
    """
    –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –ø—É—Ç—å/URL/file_id –∫ –≤–∏–¥—É, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–Ω–∏–º–∞–µ—Ç Telegram.

    :param src: –ª–æ–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å | http(s) URL | 'file_id:AAAA...'
    :return: str –∏–ª–∏ FSInputFile
    """
    if not src:
        raise ValueError("–ü—É—Å—Ç–æ–π –ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é")

    s = src.strip().strip('"').strip("'")
    if s.startswith("file_id:"):
        return s.split("file_id:", 1)[1].strip()
    if s.startswith(("http://", "https://")):
        return s

    p = Path(s).expanduser()
    if p.exists() and p.is_file():
        return FSInputFile(p)

    # –í–µ—Ä–Ω—ë–º –∫–∞–∫ –µ—Å—Ç—å ‚Äî –≤–¥—Ä—É–≥ —ç—Ç–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π file_id –±–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–∞
    return s


# ---- HANDLERS: USER FLOW ----
@router.callback_query(JoinCB.filter(F.action == "start"))
async def on_join_click(cb: CallbackQuery, state: FSMContext) -> None:
    """
    –ù–∞–∂–∞—Ç–∏–µ ¬´–í—Å—Ç—É–ø–∏—Ç—å –≤ PLS¬ª –∏–∑ –ª—é–±—ã—Ö —Å—Ç–∞—Ä—ã—Ö —ç–∫—Ä–∞–Ω–æ–≤.
    –í –Ω–æ–≤—ã—Ö —ç–∫—Ä–∞–Ω–∞—Ö (—Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é) –≤—ã —É–∂–µ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –º–µ–Ω—è–µ—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ,
    –Ω–æ —ç—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –æ—Å—Ç–∞–≤–ª—è–µ–º –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π: –æ–Ω –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –≤ –æ–∂–∏–¥–∞–Ω–∏–µ slug.
    """
    if cb.message.chat.type != "private":
        me = await cb.bot.get_me()
        pm_url = f"https://t.me/{me.username}?start=join"
        await cb.answer("–û—Ç–∫—Ä–æ–π—Ç–µ –±–æ—Ç–∞ –≤ –ª–∏—á–∫–µ, —è –ø—Ä–æ–¥–æ–ª–∂—É —Ç–∞–º.", show_alert=True)
        await cb.message.answer(
            "–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É:",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[[InlineKeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏ –≤ –õ–°", url=pm_url)]]
            ),
        )
        return

    await state.set_state(JoinStates.waiting_slug)
    await cb.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ (–Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º):\n"
        "<b>first-last-university-program-group-course-startyear</b>\n\n"
        "–ü—Ä–∏–º–µ—Ä: <code>ivan-ivanov-Harward-CSE-77-3-21</code>",
        parse_mode=ParseMode.HTML,
    )
    await cb.answer()


@router.message(JoinStates.waiting_slug)
async def on_slug_received(
    message: Message,
    state: FSMContext,
    session_maker: async_sessionmaker[AsyncSession],
) -> None:
    """
    –ü—Ä–∏–Ω—è—Ç—å –∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å slug, –≤—ã–ø–æ–ª–Ω–∏—Ç—å –±–ª–æ–∫–∏—Ä—É—é—â–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ —Å–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É.
    """
    if message.chat.type != "private":
        me = await message.bot.get_me()
        pm_url = f"https://t.me/{me.username}?start=join"
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ –ª–∏—á–∫–µ —Å –±–æ—Ç–æ–º:",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[[InlineKeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏ –≤ –õ–°", url=pm_url)]]
            ),
        )
        return

    raw = (message.text or "").strip()
    try:
        normalized = normalize_slug(raw)
        parse_slug(normalized)
    except Exception as e:
        await message.answer(f"–§–æ—Ä–º–∞—Ç –Ω–µ –ø—Ä–∏–Ω—è—Ç: {e}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return

    async with session_maker() as session:
        repo = Repo(session)

        # 1) –ß—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫
        if await repo.blacklist_contains(message.from_user.id):
            await state.clear()
            await message.answer(
                "‚ùå –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —á—ë—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ. –í—Å—Ç—É–ø–ª–µ–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ.\n"
                "–ï—Å–ª–∏ —Å—á–∏—Ç–∞–µ—Ç–µ —ç—Ç–æ –æ—à–∏–±–∫–æ–π ‚Äî —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
            )
            return

        # 2) –£–∂–µ –≤ —Ä–µ–µ—Å—Ç—Ä–µ
        if await repo.roster_contains(normalized):
            await state.clear()
            await message.answer(
                "–í—ã —É–∂–µ —á–∏—Å–ª–∏—Ç–µ—Å—å –≤ –≥—Ä—É–ø–ø–µ –ø–æ –Ω–∞—à–µ–π –±–∞–∑–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –æ–¥–Ω–∏–º –∞–∫–∫–∞—É–Ω—Ç–æ–º."
            )
            return

        # 3) –ê–∫—Ç–∏–≤–Ω–∞—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ —É–∂–µ –µ—Å—Ç—å
        if hasattr(repo, "get_active_invite"):
            active_inv = await repo.get_active_invite(message.from_user.id)
            if active_inv:
                await state.clear()
                await message.answer(
                    "–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ. "
                    "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è ‚Äî –æ–Ω–∞ –≤—Å—ë –µ—â—ë –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞."
                )
                return
        elif hasattr(repo, "has_active_invite") and await repo.has_active_invite(message.from_user.id):
            await state.clear()
            await message.answer(
                "–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ. "
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è ‚Äî –æ–Ω–∞ –≤—Å—ë –µ—â—ë –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞."
            )
            return

        # 4) –ê–∫—Ç–∏–≤–Ω–∞—è –∑–∞—è–≤–∫–∞
        if hasattr(repo, "has_active_application") and await repo.has_active_application(message.from_user.id):
            await state.clear()
            await message.answer("–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞—è–≤–∫–∞. –î–æ–∂–¥–∏—Ç–µ—Å—å —Ä–µ—à–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return

        # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É
        app = await repo.add_application(
            user_id=message.from_user.id,
            username=message.from_user.username,
            slug=normalized,
        )

        mention = f"@{message.from_user.username}" if message.from_user.username else f"id:{message.from_user.id}"
        text = (
            "üìù –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ\n\n"
            f"<b>Slug:</b> <code>{html.escape(normalized)}</code>\n"
            f"<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> <code>{html.escape(mention)}</code>\n"
            f"<b>Telegram ID:</b> <code>{message.from_user.id}</code>\n"
            f"<b>ID –∑–∞—è–≤–∫–∏:</b> <code>{app.id}</code>"
        )

        targets: list[int] = []
        admin_notify_chat_id = getattr(settings, "ADMIN_NOTIFY_CHAT_ID", None)
        if admin_notify_chat_id:
            targets.append(int(admin_notify_chat_id))
        targets.extend(settings.ADMIN_USER_IDS)

        for admin_id in targets:
            try:
                await message.bot.send_message(
                    chat_id=admin_id,
                    text=text,
                    parse_mode=ParseMode.HTML,
                    reply_markup=admin_review_kb(app.id).as_markup(),
                )
            except Exception:
                logging.getLogger("innopls-bot").warning("–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å %s", admin_id)

        await state.clear()
        # –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ
        lang = get_lang(message.from_user.id) or "ru"
        ok_text = {
            "ru": "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É ‚úÖ",
            "en": "Your application has been sent to the administrator for review ‚úÖ",
        }[lang]
        await message.answer(ok_text)


# ---- HANDLERS: ADMIN APPROVE/DENY ----
@router.callback_query(AdminCB.filter(F.action == "approve"))
async def on_admin_approved(
    cb: CallbackQuery,
    callback_data: AdminCB,
    session_maker: async_sessionmaker[AsyncSession],
) -> None:
    """
    –ê–¥–º–∏–Ω –æ–¥–æ–±—Ä–∏–ª –∑–∞—è–≤–∫—É ‚Äî –º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∫–∞—Ä—Ç–æ—á–∫—É —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ + –±–∞–Ω–Ω–µ—Ä.
    """
    app_id = int(callback_data.app_id or 0)
    async with session_maker() as session:
        repo = Repo(session)
        app = await repo.get_application(app_id)
        if not app:
            await cb.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
            return

        await repo.set_application_status(app_id, status="approved")

    # –¢–µ–∫—Å—Ç + –±–∞–Ω–Ω–µ—Ä –ø–æ —è–∑—ã–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    lang = get_lang(app.user_id) or "ru"
    caption = {
        "ru": (
            "‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n\n"
            f"–ü—Ä–µ–∂–¥–µ —á–µ–º –≤—Å—Ç—É–ø–∏—Ç—å, –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å–æ —Å–≤–æ–¥–æ–º –ø—Ä–∞–≤–∏–ª:\n{html.escape(settings.RULES_URL)}\n\n"
            "<b><u>–í—Å—Ç—É–ø–∞–π—Ç–µ —Ç–æ–ª—å–∫–æ —Å —ç—Ç–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞, –≤ –∫–æ—Ç–æ—Ä—ã–π –±–æ—Ç –æ—Ç–ø—Ä–∞–≤–∏–ª —Å—Å—ã–ª–∫—É, –∏–Ω–∞—á–µ –±—É–¥–µ—Ç–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–µ—Å–µ–¥–µ.</u></b>\n\n"
            "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, –µ—Å–ª–∏ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç–µ –ø—Ä–∞–≤–∏–ª–∞.\n\n\n\n"
            "<i>–ü—Ä–∏–Ω–∏–º–∞—è –ø—Ä–∞–≤–∏–ª–∞, –≤—ã —Ä–∞–∑—Ä–µ—à–∞–µ—Ç–µ –±–æ—Ç—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞</i>"
        ),
        "en": (
            "‚úÖ Your application has been approved.\n\n"
            f"Before joining, please read our rules:\n{html.escape(settings.RULES_URL)}\n\n"
            "<b><u>Join only from this account that received the link, otherwise you will be blocked in the chat.</u></b>\n\n"
            "Press the button below if you accept the rules.\n\n\n\n"
            "<i>By accepting the rules, you allow the bot to send advertising messages</i>"
        ),
    }[lang]

    kb = InlineKeyboardMarkup(
        inline_keyboard=[[
            InlineKeyboardButton(
                text={"ru": "–ü—Ä–∏–Ω–∏–º–∞—é –ø—Ä–∞–≤–∏–ª–∞", "en": "I accept the rules"}[lang],
                callback_data=JoinCB(action="accept_rules", app_id=str(app_id)).pack(),
            )
        ]]
    )

    try:
        await cb.bot.send_photo(
            chat_id=app.user_id,
            photo=_resolve_photo_source(APPROVE_BANNER[lang]),
            caption=caption,
            parse_mode=ParseMode.HTML,
            reply_markup=kb,
        )
    except Exception:
        # –§–æ–ª–±—ç–∫ –±–µ–∑ –∫–∞—Ä—Ç–∏–Ω–∫–∏
        await cb.bot.send_message(chat_id=app.user_id, text=caption, parse_mode=ParseMode.HTML, reply_markup=kb)

    await cb.answer("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")


@router.callback_query(AdminCB.filter(F.action == "deny"))
async def on_admin_deny_click(
    cb: CallbackQuery,
    callback_data: AdminCB,
    state: FSMContext,
    session_maker: async_sessionmaker[AsyncSession],
) -> None:
    """
    –°—Ç–∞—Ä—Ç –æ—Ç–∫–∞–∑–∞: –ø—Ä–æ—Å–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø—Ä–∏—Å–ª–∞—Ç—å –ø—Ä–∏—á–∏–Ω—É –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.
    –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∑–∞—è–≤–∫–∏ –≤ FSM.
    """
    app_id = int(callback_data.app_id or 0)

    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –∑–∞—è–≤–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —á—Ç–æ–±—ã –Ω–µ —Å–æ–±–∏—Ä–∞—Ç—å –ø—Ä–∏—á–∏–Ω—É –≤–ø—É—Å—Ç—É—é
    async with session_maker() as session:
        repo = Repo(session)
        app = await repo.get_application(app_id)
        if not app:
            await cb.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
            return

    await state.set_state(AdminStates.waiting_deny_reason)
    await state.update_data(app_id=app_id)

    await cb.message.answer(
        "‚úã –û—Ç–∫–∞–∑ –ø–æ –∑–∞—è–≤–∫–µ.\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º <b>–ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–∞–∑–∞</b> –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\n"
        "–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–µ–∑ –ø—Ä–∏—á–∏–Ω—ã ‚Äî –ø—Ä–∏—à–ª–∏—Ç–µ –¥–µ—Ñ–∏—Å ¬´-¬ª.",
        parse_mode=ParseMode.HTML,
    )
    await cb.answer()


@router.message(AdminStates.waiting_deny_reason)
async def on_admin_deny_reason(
    message: Message,
    state: FSMContext,
    session_maker: async_sessionmaker[AsyncSession],
) -> None:
    """
    –ü—Ä–∏—ë–º –ø—Ä–∏—á–∏–Ω—ã –æ—Ç–∫–∞–∑–∞ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.
    –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ –Ω–∞ 'rejected', —É–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞—Ä—Ç–æ—á–∫–æ–π —Å –±–∞–Ω–Ω–µ—Ä–æ–º.
    """
    data = await state.get_data()
    app_id = int(data.get("app_id") or 0)
    reason_raw = (message.text or "").strip()

    # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏—á–∏–Ω—ã: –¥–µ—Ñ–∏—Å/–ø—É—Å—Ç–æ -> None
    reason_to_save = None if reason_raw in {"", "-", "‚Äî"} else reason_raw

    async with session_maker() as session:
        repo = Repo(session)
        app = await repo.get_application(app_id)
        if not app:
            await message.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –û—Ç–º–µ–Ω–∞.")
            await state.clear()
            return

        await repo.set_application_status(app_id, status="rejected", reason=reason_to_save)

        # –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        lang = get_lang(app.user_id) or "ru"
        caption = {
            "ru": (
                "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n\n"
                "<i>–ü—Ä–∏—á–∏–Ω–∞:</i>\n{reason}"
            ),
            "en": (
                "Your application was rejected by an administrator.\n\n"
                "<i>Reason:</i>\n{reason}"
            ),
        }[lang].format(reason=html.escape(reason_raw) if reason_to_save else "‚Äî")

        try:
            await message.bot.send_photo(
                chat_id=app.user_id,
                photo=_resolve_photo_source(DENY_BANNER[lang]),
                caption=caption,
                parse_mode=ParseMode.HTML,
            )
        except Exception:
            await message.bot.send_message(
                chat_id=app.user_id, text=caption, parse_mode=ParseMode.HTML
            )

    await state.clear()
    await message.answer("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ‚úÖ")


# ---- HANDLERS: USER ACCEPT RULES ----
@router.callback_query(JoinCB.filter(F.action == "accept_rules"))
async def on_rules_accepted(
    cb: CallbackQuery,
    callback_data: JoinCB,
    session_maker: async_sessionmaker[AsyncSession],
) -> None:
    """
    –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª ¬´–ü—Ä–∏–Ω–∏–º–∞—é –ø—Ä–∞–≤–∏–ª–∞¬ª.
    –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –±–æ—Ç–∞ –∏ —Å–æ–∑–¥–∞—ë–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∏–Ω–≤–∞–π—Ç (1 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, 24 —á–∞—Å–∞).
    –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É —Å–æ —Å—Å—ã–ª–∫–æ–π –∏ –±–∞–Ω–Ω–µ—Ä–æ–º.
    """
    app_id = int(callback_data.app_id or 0)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞ –≤ —Ü–µ–ª–µ–≤–æ–º —á–∞—Ç–µ
    try:
        me = await cb.bot.get_me()
        cm = await cb.bot.get_chat_member(settings.TARGET_CHAT_ID, me.id)
    except TelegramBadRequest:
        await cb.message.answer("‚ùå –ù–µ –≤–∏–∂—É —Ü–µ–ª–µ–≤–æ–π —á–∞—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ TARGET_CHAT_ID –∏ —á—Ç–æ –±–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ —á–∞—Ç.")
        await cb.answer()
        return

    if cm.status != "administrator":
        await cb.message.answer("‚ùå –ë–æ—Ç –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –≤ —Ü–µ–ª–µ–≤–æ–º —á–∞—Ç–µ. –í—ã–¥–∞–π—Ç–µ –ø—Ä–∞–≤–æ ¬´–ü—Ä–∏–≥–ª–∞—à–∞—Ç—å –ø–æ —Å—Å—ã–ª–∫–µ¬ª.")
        await cb.answer()
        return

    if isinstance(cm, ChatMemberAdministrator):
        if hasattr(cm, "can_invite_users") and not cm.can_invite_users:
            await cb.message.answer("‚ùå –£ –±–æ—Ç–∞ –Ω–µ—Ç –ø—Ä–∞–≤–∞ ¬´–ü—Ä–∏–≥–ª–∞—à–∞—Ç—å –ø–æ —Å—Å—ã–ª–∫–µ¬ª. –í–∫–ª—é—á–∏—Ç–µ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ.")
            await cb.answer()
            return

    async with session_maker() as session:
        repo = Repo(session)
        app = await repo.get_application(app_id)
        if not app or app.user_id != cb.from_user.id:
            await cb.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º.", show_alert=True)
            return

        # –ù–µ –≤—ã–¥–∞—ë–º –Ω–æ–≤—ã–π –∏–Ω–≤–∞–π—Ç, –µ—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π
        if hasattr(repo, "has_active_invite") and await repo.has_active_invite(cb.from_user.id):
            await cb.message.answer("–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è.")
            await cb.answer()
            return

        expire_dt = datetime.now(timezone.utc) + timedelta(hours=24)
        try:
            link: ChatInviteLink = await cb.bot.create_chat_invite_link(
                chat_id=settings.TARGET_CHAT_ID,
                name=f"PLS for {cb.from_user.id}",
                member_limit=1,
                expire_date=expire_dt,
                creates_join_request=False,
            )
        except TelegramBadRequest as e:
            hint = "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –±–æ—Ç–∞ –Ω–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∞–º–∏ –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å TARGET_CHAT_ID."
            await cb.message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É.\n{e}\n\n{hint}")
            await cb.answer()
            return

        await repo.add_invite(
            user_id=cb.from_user.id,
            chat_id=settings.TARGET_CHAT_ID,
            invite_link=link.invite_link,
            expires_at=expire_dt.strftime("%Y-%m-%d %H:%M:%S"),
        )
        await repo.set_application_status(app_id, status="done")

    # –ö–∞—Ä—Ç–æ—á–∫–∞ —Å–æ —Å—Å—ã–ª–∫–æ–π
    lang = get_lang(cb.from_user.id) or "ru"
    caption = {
        "ru": (
            "–û—Ç–ª–∏—á–Ω–æ! –í–æ—Ç –≤–∞—à–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ "
            "(–¥–µ–π—Å—Ç–≤—É–µ—Ç 24 —á–∞—Å–∞ –∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–∞—Å):\n"
            f"{html.escape(link.invite_link)}\n\n"
            "–ü–æ—Å–ª–µ –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–æ–π–¥—ë—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏."
        ),
        "en": (
            "Great! Here is your personal invite link "
            "(valid for 24 hours and only for you):\n"
            f"{html.escape(link.invite_link)}\n\n"
            "After joining, verification will happen automatically."
        ),
    }[lang]

    try:
        await cb.message.answer_photo(
            photo=_resolve_photo_source(LINK_BANNER),
            caption=caption,
            parse_mode=ParseMode.HTML,
        )
    except Exception:
        await cb.message.answer(caption, parse_mode=ParseMode.HTML)

    await cb.answer()
