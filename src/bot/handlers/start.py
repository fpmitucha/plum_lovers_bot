"""
–°—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é –ö–õ–° —Å –≤—ã–±–æ—Ä–æ–º —è–∑—ã–∫–∞, –±–∞–Ω–Ω–µ—Ä–∞–º–∏ –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π.

–ü–æ–≤–µ–¥–µ–Ω–∏–µ:
- –í –≥—Ä—É–ø–ø–µ: –ø—Ä–æ—Å–∏–º –æ—Ç–∫—Ä—ã—Ç—å –±–æ—Ç–∞ –≤ –õ–°.
- –í –õ–°: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ + –∫–∞—Ä—Ç–∏–Ω–∫—É (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –≤ settings.START_PHOTO_URL)
        + –≤—ã–±–æ—Ä —è–∑—ã–∫–∞ (üá∑üá∫/üá¨üáß).
- –ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (–±–∞–Ω–Ω–µ—Ä –º–µ–Ω—è–µ—Ç—Å—è –Ω–∞ AFTER_LANG_BANNER):
  —Å–ª–µ–≤–∞ ¬´–ö–õ–° –∏–Ω—Ñ–æ / Club info¬ª, —Å–ø—Ä–∞–≤–∞ ¬´–í—Å—Ç—É–ø–∏—Ç—å –≤ –ö–õ–° / Join the club¬ª.
- –≠–∫—Ä–∞–Ω ¬´–ö–õ–° –∏–Ω—Ñ–æ / Club info¬ª –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–π –±–∞–Ω–Ω–µ—Ä INFO_BANNER, —Ü–∏—Ç–∞—Ç—É,
  –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –∫–Ω–æ–ø–∫–∏: ¬´–í—Å—Ç—É–ø–∏—Ç—å / Join¬ª –∏ ¬´‚¨ÖÔ∏è –ù–∞–∑–∞–¥ / Back¬ª.
- –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ ¬´–í—Å—Ç—É–ø–∏—Ç—å –≤ –ö–õ–°¬ª —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –º–µ–Ω—è–µ—Ç—Å—è –Ω–∞ —Ñ–æ—Ä–º—É —Å –±–∞–Ω–Ω–µ—Ä–æ–º JOIN_BANNER.

–ë–∞–Ω–Ω–µ—Ä—ã:
- –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π ‚Äî –±–µ—Ä—ë—Ç—Å—è –∏–∑ settings.START_PHOTO_URL (–ª–æ–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å | file_id | URL).
- –ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞ ‚Äî ./data/pls_afterchangelanguage_banner.png
- –≠–∫—Ä–∞–Ω ¬´–ö–õ–° –∏–Ω—Ñ–æ¬ª  ‚Äî ./data/pls_info_banner_600x400.png
- –≠–∫—Ä–∞–Ω ¬´–í—Å—Ç—É–ø–∏—Ç—å¬ª  ‚Äî ./data/pls_join_ru_banner_600x400.png / en-–≤–µ—Ä—Å–∏—è –ø—Ä–∏ EN.
"""

from __future__ import annotations

from pathlib import Path
from typing import Optional, Union

from aiogram import Router, F
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart
from aiogram.filters.callback_data import CallbackData
from aiogram.fsm.context import FSMContext
from aiogram.types import (
    Message,
    CallbackQuery,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    InputMediaPhoto,
)
from aiogram.types.input_file import FSInputFile
from aiogram.utils.keyboard import InlineKeyboardBuilder

from bot.config import settings
from bot.keyboards.common import JoinCB
from bot.services.i18n import set_lang, get_lang
from bot.handlers.join import JoinStates

router = Router(name="start")

# --- –õ–æ–∫–∞–ª—å–Ω—ã–µ –ø—É—Ç–∏ –±–∞–Ω–Ω–µ—Ä–æ–≤ ---
AFTER_LANG_BANNER = "./data/pls_afterchangelanguage_banner.png"
INFO_BANNER = "./data/pls_info_banner_600x400.png"
JOIN_BANNER = {
    "ru": "./data/pls_join_ru_banner_600x400.png",
    "en": "./data/pls_join_en_banner_600x400.png",
}


class StartCB(CallbackData, prefix="start"):
    """
    CallbackData –¥–ª—è —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ –º–µ–Ω—é.

    action:
      - "lang" ‚Äî –≤—ã–±—Ä–∞—Ç—å —è–∑—ã–∫ (value=ru|en)
      - "info" ‚Äî –æ—Ç–∫—Ä—ã—Ç—å —ç–∫—Ä–∞–Ω –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ (value=ru|en)
      - "back" ‚Äî –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (value=ru|en)
    """
    action: str
    value: Optional[str] = None  # ru | en | None


# --- –¢–µ–∫—Å—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ ---

_T = {
    "greet": {
        "text": (
            "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –≤ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–º –±–æ—Ç–µ <b>–ö–ª—É–±–∞ –õ—é–±–∏—Ç–µ–ª–µ–π –°–ª–∏–≤</b> ‚Äî "
            "–º–µ—Å—Ç–∞, –≥–¥–µ –¥–æ–±—Ä–æ –ø—Ä–µ–≤—Ä–∞—â–∞–µ—Ç—Å—è –≤ –∑–Ω–∞–Ω–∏—è.\n\n"
            "–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞:"
        )
    },
    "menu": {
        "ru": "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <b>–ö–õ–°</b> ‚Äî –∑–∞–∫—Ä—ã—Ç–æ–µ –º–µ—Å—Ç–æ, –≥–¥–µ –¥–æ–±—Ä–æ –ø—Ä–µ–≤—Ä–∞—â–∞–µ—Ç—Å—è –≤ –∑–Ω–∞–Ω–∏—è.\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –Ω–∏–∂–µ.",
        "en": "Welcome to the <b>Plum Lovers Club</b> ‚Äî a private place where kindness becomes knowledge.\n\nChoose a section below.",
    },
    "btn_info": {"ru": "–ö–õ–° –∏–Ω—Ñ–æ", "en": "Club info"},
    "btn_join": {"ru": "–í—Å—Ç—É–ø–∏—Ç—å –≤ –ö–õ–°", "en": "Join the club"},
    "btn_back": {"ru": "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "en": "‚¨ÖÔ∏è Back"},
    "info": {
        "ru": (
            "<blockquote>–¢–≤–æ—Ä–∏ –¥–æ–±—Ä–æ –∏ –Ω–µ –±–æ–ª—Ç–∞–π –æ —Ç–æ–º, –•–æ—Ä–æ—à–∏—Ö –¥–µ–ª –Ω–µ –ø–æ—Ä—Ç–∏ —Ö–≤–∞—Å—Ç–æ–≤—Å—Ç–≤–æ–º.</blockquote>"
            "–ö–õ–° ‚Äî –∑–∞–∫—Ä—ã—Ç–æ–µ –º–µ—Å—Ç–æ, –≥–¥–µ –¥–æ–±—Ä–æ –ø—Ä–µ–≤—Ä–∞—â–∞–µ—Ç—Å—è –≤ –∑–Ω–∞–Ω–∏—è. "
            "–ú—ã –∑–¥–µ—Å—å –Ω–µ –∑–∞ —Ö–∞–ª—è–≤–æ–π, –∞ –∑–∞ –≤–∑–∞–∏–º–æ–ø–æ–º–æ—â—å—é: –¥–µ–ª–∏–º—Å—è —Å–≤–æ–∏–º–∏ –∫–æ–Ω—Å–ø–µ–∫—Ç–∞–º–∏, –∞–≤—Ç–æ—Ä—Å–∫–∏–º–∏ —Ä–∞–∑–±–æ—Ä–∞–º–∏ "
            "–∏ —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ –æ—Ç–∫—Ä—ã—Ç—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã, —É–≤–∞–∂–∞—è —Ç—Ä—É–¥ –∞–≤—Ç–æ—Ä–æ–≤ –∏ —É–∫–∞–∑—ã–≤–∞—è –∏—Å—Ç–æ—á–Ω–∏–∫–∏. "
            "–ê—Ç–º–æ—Å—Ñ–µ—Ä–∞ ‚Äî –¥—Ä—É–∂–µ–ª—é–±–∏–µ –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞. –ù–∏–∫–∞–∫–∏—Ö –≥—Ä–æ–º–∫–∏—Ö –∞—Ñ–∏—à –∏ –ª–∏—à–Ω–∏—Ö –∏–º–µ–Ω ‚Äî —Ç–æ–ª—å–∫–æ —Ç—ë–ø–ª—ã–π —á–∞—Ç –∏ –ø–æ–ª—å–∑–∞ –ø–æ –¥–µ–ª—É.\n\n"
            "<b>–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è: –≤–æ–∑—å–º–∏ –¥–æ–±—Ä–æ, –æ—Å—Ç–∞–≤—å –¥–æ–±—Ä–æ ‚Äî –∏ —É—á—ë–±–∞ —Å—Ç–∞–Ω–µ—Ç –ª–µ–≥—á–µ.</b>"
        ),
        "en": (
            "<blockquote>Do good and don‚Äôt brag about it; boasting spoils good deeds.</blockquote>"
            "PLC is a private place where kindness turns into knowledge. "
            "We‚Äôre here for mutual help, not free rides: we share notes, original breakdowns and links to open resources, "
            "respecting authors‚Äô work and citing sources. The vibe is friendly and supportive. "
            "No loud posters or name-dropping ‚Äî just a warm chat and practical benefits.\n\n"
            "<b>Join in: take kindness, leave kindness ‚Äî studying gets easier.</b>"
        ),
    },
    "join_caption": {
        "ru": (
            "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ (–Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º):\n"
            "first-last-university-program-group-course-startyear\n\n"
            "–ü—Ä–∏–º–µ—Ä: <code>ivan-ivanov-Harward-CSE-77-3-21</code>"
        ),
        "en": (
            "Enter your data in this format:\n"
            "first-last-university-program-group-course-startyear\n\n"
            "Example: <code>john-doe-Harward-CSE-77-3-21</code>"
        ),
    },
}


# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---

def _lang_kb() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞: üá∑üá∫ –†—É—Å—Å–∫–∏–π / üá¨üáß English."""
    kb = InlineKeyboardBuilder()
    kb.add(InlineKeyboardButton(text="–†—É—Å—Å–∫–∏–π üá∑üá∫", callback_data=StartCB(action="lang", value="ru").pack()))
    kb.add(InlineKeyboardButton(text="English üá¨üáß", callback_data=StartCB(action="lang", value="en").pack()))
    kb.adjust(2)
    return kb.as_markup()


def _main_menu_kb(lang: str, *, show_join: bool = True) -> InlineKeyboardMarkup:
    """
    –ì–ª–∞–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —è–∑—ã–∫–µ.

    :param lang: 'ru' | 'en'
    :param show_join: –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –ª–∏ –∫–Ω–æ–ø–∫—É ¬´–í—Å—Ç—É–ø–∏—Ç—å¬ª
    """
    kb = InlineKeyboardBuilder()
    kb.add(InlineKeyboardButton(text=_T["btn_info"][lang], callback_data=StartCB(action="info", value=lang).pack()))
    if show_join:
        kb.add(InlineKeyboardButton(text=_T["btn_join"][lang], callback_data=JoinCB(action="start").pack()))
    kb.adjust(2 if show_join else 1)
    return kb.as_markup()


def _info_menu_kb(lang: str, *, show_join: bool = True) -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥ —ç–∫—Ä–∞–Ω–æ–º ¬´–ò–Ω—Ñ–æ¬ª.

    :param lang: 'ru' | 'en'
    :param show_join: –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –ª–∏ –∫–Ω–æ–ø–∫—É ¬´–í—Å—Ç—É–ø–∏—Ç—å¬ª
    """
    kb = InlineKeyboardBuilder()
    if show_join:
        kb.add(InlineKeyboardButton(text=_T["btn_join"][lang], callback_data=JoinCB(action="start").pack()))
    kb.add(InlineKeyboardButton(text=_T["btn_back"][lang], callback_data=StartCB(action="back", value=lang).pack()))
    kb.adjust(2 if show_join else 1)
    return kb.as_markup()


def _join_prompt_kb(lang: str) -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥ —Ñ–æ—Ä–º–æ–π ¬´–í—Å—Ç—É–ø–∏—Ç—å¬ª.
    –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫—É ¬´–ù–∞–∑–∞–¥¬ª / ¬´Back¬ª.
    """
    kb = InlineKeyboardBuilder()
    kb.add(InlineKeyboardButton(text=_T["btn_back"][lang], callback_data=StartCB(action="back", value=lang).pack()))
    kb.adjust(1)
    return kb.as_markup()


# --- –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞ —Ñ–æ—Ç–æ ---

def _resolve_photo_source(src: str) -> Union[str, FSInputFile]:
    """
    –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫ —Ñ–æ—Ç–æ –¥–ª—è Telegram:
    1) 'file_id:...' ‚Üí –≤–µ—Ä–Ω—É—Ç—å —Å–∞–º file_id;
    2) 'http(s)://'  ‚Üí –≤–µ—Ä–Ω—É—Ç—å URL –∫–∞–∫ –µ—Å—Ç—å;
    3) –∏–Ω–∞—á–µ —Å—á–∏—Ç–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–º –ø—É—Ç—ë–º –∏ –æ—Ç–¥–∞—ë–º FSInputFile, –µ—Å–ª–∏ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.
    """
    if not src:
        raise ValueError("–ü—É—Å—Ç–æ–π –ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é")

    s = src.strip().strip('"').strip("'")

    if s.startswith("file_id:"):
        return s.split("file_id:", 1)[1].strip()
    if s.startswith(("http://", "https://")):
        return s

    p = Path(s).expanduser()
    if p.exists() and p.is_file():
        return FSInputFile(p)

    return s


# --- –•—ç–Ω–¥–ª–µ—Ä—ã ---

@router.message(CommandStart())
async def cmd_start(message: Message) -> None:
    """
    /start:
    - –µ—Å–ª–∏ —á–∞—Ç –Ω–µ private ‚Äî –ø—Ä–æ—Å–∏–º –ø–µ—Ä–µ–π—Ç–∏ –≤ –õ–°;
    - –µ—Å–ª–∏ private ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞) –∏ –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞.
    """
    if message.chat.type != "private":
        me = await message.bot.get_me()
        pm_url = f"https://t.me/{me.username}?start=join"
        await message.answer(
            "–û—Ç–∫—Ä–æ–π—Ç–µ –±–æ—Ç–∞ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å:",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[[InlineKeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏ –≤ –õ–°", url=pm_url)]]
            ),
        )
        return

    photo_src = (getattr(settings, "START_PHOTO_URL", "") or "").strip()
    if photo_src:
        try:
            photo = _resolve_photo_source(photo_src)
            await message.answer_photo(
                photo=photo,
                caption=_T["greet"]["text"],
                parse_mode=ParseMode.HTML,
                reply_markup=_lang_kb(),
            )
            return
        except Exception:
            # –ü–∞–¥–∞–µ–º –Ω–∞ —Ç–µ–∫—Å—Ç, –µ—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–æ—Å—å
            pass

    await message.answer(
        _T["greet"]["text"],
        parse_mode=ParseMode.HTML,
        reply_markup=_lang_kb(),
    )


@router.callback_query(StartCB.filter(F.action == "lang"))
async def on_lang_selected(cb: CallbackQuery, callback_data: StartCB) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞ (ru|en).
    –ú–µ–Ω—è–µ–º –±–∞–Ω–Ω–µ—Ä –Ω–∞ AFTER_LANG_BANNER –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.
    –¢–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    lang = callback_data.value or "ru"
    set_lang(cb.from_user.id, lang)

    media = InputMediaPhoto(
        media=_resolve_photo_source(AFTER_LANG_BANNER),
        caption=_T["menu"][lang],
        parse_mode=ParseMode.HTML,
    )
    try:
        await cb.message.edit_media(media=media, reply_markup=_main_menu_kb(lang, show_join=True))
    except Exception:
        try:
            await cb.message.answer_photo(
                photo=_resolve_photo_source(AFTER_LANG_BANNER),
                caption=_T["menu"][lang],
                parse_mode=ParseMode.HTML,
                reply_markup=_main_menu_kb(lang, show_join=True),
            )
            await cb.message.delete()
        except Exception:
            await cb.message.answer(
                _T["menu"][lang],
                parse_mode=ParseMode.HTML,
                reply_markup=_main_menu_kb(lang, show_join=True),
            )
    await cb.answer()


@router.callback_query(StartCB.filter(F.action == "info"))
async def on_info(cb: CallbackQuery, callback_data: StartCB) -> None:
    """
    –ü–æ–∫–∞–∑–∞—Ç—å —ç–∫—Ä–∞–Ω ¬´–ö–õ–° –∏–Ω—Ñ–æ / Club info¬ª –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —è–∑—ã–∫–µ —Å –±–∞–Ω–Ω–µ—Ä–æ–º INFO_BANNER.
    """
    lang = callback_data.value or get_lang(cb.from_user.id) or "ru"

    media = InputMediaPhoto(
        media=_resolve_photo_source(INFO_BANNER),
        caption=_T["info"][lang],
        parse_mode=ParseMode.HTML,
    )
    try:
        await cb.message.edit_media(media=media, reply_markup=_info_menu_kb(lang, show_join=True))
    except Exception:
        try:
            await cb.message.answer_photo(
                photo=_resolve_photo_source(INFO_BANNER),
                caption=_T["info"][lang],
                parse_mode=ParseMode.HTML,
                reply_markup=_info_menu_kb(lang, show_join=True),
            )
            await cb.message.delete()
        except Exception:
            await cb.message.answer(
                _T["info"][lang],
                parse_mode=ParseMode.HTML,
                reply_markup=_info_menu_kb(lang, show_join=True),
            )
    await cb.answer()


@router.callback_query(StartCB.filter(F.action == "back"))
async def on_back(cb: CallbackQuery, callback_data: StartCB) -> None:
    """
    –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (–±–∞–Ω–Ω–µ—Ä —Å–Ω–æ–≤–∞ AFTER_LANG_BANNER).
    """
    lang = callback_data.value or get_lang(cb.from_user.id) or "ru"

    media = InputMediaPhoto(
        media=_resolve_photo_source(AFTER_LANG_BANNER),
        caption=_T["menu"][lang],
        parse_mode=ParseMode.HTML,
    )
    try:
        await cb.message.edit_media(media=media, reply_markup=_main_menu_kb(lang, show_join=True))
    except Exception:
        try:
            await cb.message.answer_photo(
                photo=_resolve_photo_source(AFTER_LANG_BANNER),
                caption=_T["menu"][lang],
                parse_mode=ParseMode.HTML,
                reply_markup=_main_menu_kb(lang, show_join=True),
            )
            await cb.message.delete()
        except Exception:
            await cb.message.answer(
                _T["menu"][lang],
                parse_mode=ParseMode.HTML,
                reply_markup=_main_menu_kb(lang, show_join=True),
            )
    await cb.answer()


@router.callback_query(JoinCB.filter(F.action == "start"))
async def on_join_start(cb: CallbackQuery, state: FSMContext) -> None:
    """
    –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –∑–∞–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —Ñ–æ—Ä–º—É ¬´–í—Å—Ç—É–ø–∏—Ç—å –≤ –ö–õ–°¬ª
    —Å –±–∞–Ω–Ω–µ—Ä–æ–º JOIN_BANNER (–≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —è–∑—ã–∫–∞) –∏ –ø–æ–¥—Å–∫–∞–∑–∫–æ–π –ø–æ —Ñ–æ—Ä–º–∞—Ç—É.
    –¢–∞–∫–∂–µ –ø–µ—Ä–µ–≤–æ–¥–∏–º FSM –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Å–ª–∞–≥–∞.
    """
    lang = get_lang(cb.from_user.id) or "ru"

    media = InputMediaPhoto(
        media=_resolve_photo_source(JOIN_BANNER["en" if lang == "en" else "ru"]),
        caption=_T["join_caption"][lang],
        parse_mode=ParseMode.HTML,
    )
    try:
        await cb.message.edit_media(media=media, reply_markup=_join_prompt_kb(lang))
    except Exception:
        try:
            await cb.message.answer_photo(
                photo=_resolve_photo_source(JOIN_BANNER["en" if lang == "en" else "ru"]),
                caption=_T["join_caption"][lang],
                parse_mode=ParseMode.HTML,
                reply_markup=_join_prompt_kb(lang),
            )
            await cb.message.delete()
        except Exception:
            await cb.message.answer(
                _T["join_caption"][lang],
                parse_mode=ParseMode.HTML,
                reply_markup=_join_prompt_kb(lang),
            )

    # –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
    await state.set_state(JoinStates.waiting_slug)

    await cb.answer()


@router.message(F.photo, F.from_user.id.in_(settings.ADMIN_USER_IDS))
async def grab_file_id(message: Message) -> None:
    """
    –í–µ—Ä–Ω—É—Ç—å –∞–¥–º–∏–Ω–∞–º file_id –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ñ–æ—Ç–æ (–¥–ª—è START_PHOTO_URL=file_id:...),
    —á—Ç–æ–±—ã —É–¥–æ–±–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–ª—è—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É –∫ —Å—Ç–∞—Ä—Ç–æ–≤–æ–º—É —ç–∫—Ä–∞–Ω—É.
    """
    file_id = message.photo[-1].file_id
    await message.answer(f"file_id: `{file_id}`", parse_mode="Markdown")
