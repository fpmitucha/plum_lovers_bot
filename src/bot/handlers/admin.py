from __future__ import annotations
"""
–ê–¥–º–∏–Ω—Å–∫–∞—è –ø–∞–Ω–µ–ª—å –ö–õ–°.

–î–æ—Å—Ç—É–ø: —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º. –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–æ–º –∞–¥–º–∏–Ω–æ–≤ ‚Äî —Ç–æ–ª—å–∫–æ –ì–ª–∞–≤–Ω–æ–º—É –∞–¥–º–∏–Ω—É.

–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª:
- –ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–µ–µ—Å—Ç—Ä–∞ (roster) –ø–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω–æ –ø–æ 20, –ª–µ–∫—Å. –ø–æ slug.
- –ü–æ–∏—Å–∫ –ø–æ –ª—é–±–æ–º—É —Ñ—Ä–∞–≥–º–µ–Ω—Ç—É slug, —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å/—É–¥–∞–ª—è—Ç—å.
- –†—É—á–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ —Ä–µ–µ—Å—Ç—Ä (–ø–æ slug).
- –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –∏–∑ —Ä–µ–µ—Å—Ç—Ä–∞.
- –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ slug –∑–∞–ø–∏—Å–∏.
- –ü—Ä–æ—Å–º–æ—Ç—Ä —á—ë—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ (–ø–æ 20/—Å—Ç—Ä).
- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏ (—Ç–æ–ª—å–∫–æ –≥–ª–∞–≤–Ω—ã–π): –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ/—É–¥–∞–ª–µ–Ω–∏–µ, –ø—Ä–æ—Å–º–æ—Ç—Ä.

–ö–æ–º–∞–Ω–¥–∞ –≤—Ö–æ–¥–∞: /admin
"""
import contextlib
from typing import Optional

from aiogram import Router, F
from aiogram.enums import ParseMode
from aiogram.exceptions import TelegramBadRequest
from aiogram.filters import Command
from aiogram.filters.callback_data import CallbackData
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder

from sqlalchemy.ext.asyncio import AsyncSession, async_sessionmaker
from sqlalchemy import text

from bot.config import settings
from bot.utils.repo import Repo
from bot.utils.parsing import parse_slug, normalize_slug

router = Router(name="admin_menu")

# –ì–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω
MAIN_ADMIN_ID = 8421106062
# –†–∞–∑–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
PAGE_SIZE = 20

# –§–∏–ª—å—Ç—Ä ¬´–Ω–µ –∫–æ–º–∞–Ω–¥–∞¬ª ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –≤—Å—ë, —á—Ç–æ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å ¬´/¬ª
NO_COMMAND = (~F.text.regexp(r"^\s*/")) & (~F.caption.regexp(r"^\s*/"))

class AdmCB(CallbackData, prefix="adm2"):
    """
    CallbackData –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ –º–µ–Ω—é.

    action:
      - menu
      - roster_page (value = –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã, —Å 0)
      - roster_edit (value = id –∑–∞–ø–∏—Å–∏)
      - roster_del  (value = id –∑–∞–ø–∏—Å–∏)
      - roster_add  (value –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è) -> –ø—Ä–æ—Å–∏–º slug
      - search      (value –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è) -> –ø—Ä–æ—Å–∏–º –∑–∞–ø—Ä–æ—Å
      - search_page (value = –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã) (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π state)
      - bl_page     (value = –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã) ‚Äî —á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫
      - admins      (—Ç–æ–ª—å–∫–æ –≥–ª–∞–≤–Ω—ã–π)
      - admin_add   -> –ø—Ä–æ—Å–∏–º user_id
      - admin_del   -> –ø—Ä–æ—Å–∏–º user_id
    """
    action: str
    value: Optional[str] = None


class AdminStates(StatesGroup):
    """FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–¥–º–∏–Ω—Å–∫–æ–π –ø–∞–Ω–µ–ª–∏."""
    waiting_roster_slug = State()
    waiting_search_query = State()
    waiting_edit_slug = State()  # –∫–æ–Ω—Ç–µ–∫—Å—Ç: roster_id
    waiting_admin_user_id = State()
    waiting_admin_del_user_id = State()


# -------------------- –£–¢–ò–õ–ò–¢–´ --------------------

async def _get_all_admin_ids(repo: Repo) -> set[int]:
    """
    –°–æ–±—Ä–∞—Ç—å –º–Ω–æ–∂–µ—Å—Ç–≤–æ –∞–¥–º–∏–Ω–æ–≤: –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫, –∏–∑ –ë–î –∏ –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞.
    """
    ids = set(getattr(settings, "ADMIN_USER_IDS", []) or [])
    ids.add(MAIN_ADMIN_ID)
    for a in await repo.list_admins():
        ids.add(a.user_id)
    return ids


def _is_admin_cached(admin_ids: set[int], user_id: int) -> bool:
    """
    –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∞ –ø–æ —É–∂–µ —Å–æ–±—Ä–∞–Ω–Ω–æ–º—É –º–Ω–æ–∂–µ—Å—Ç–≤—É.
    """
    return (user_id in admin_ids) or (user_id == MAIN_ADMIN_ID)


def _menu_kb(can_manage_admins: bool) -> InlineKeyboardBuilder:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∫–æ—Ä–Ω–µ–≤–æ–≥–æ –º–µ–Ω—é (–≤–æ–∑–≤—Ä–∞—â–∞–µ–º BUILDER).
    """
    kb = InlineKeyboardBuilder()
    kb.button(text="üìö –†–µ–µ—Å—Ç—Ä (20/—Å—Ç—Ä)", callback_data=AdmCB(action="roster_page", value="0").pack())
    kb.button(text="üîé –ü–æ–∏—Å–∫/–ø—Ä–∞–≤–∫–∞", callback_data=AdmCB(action="search").pack())
    kb.button(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ —Ä–µ–µ—Å—Ç—Ä", callback_data=AdmCB(action="roster_add").pack())
    kb.button(text="üö´ –ß—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫", callback_data=AdmCB(action="bl_page", value="0").pack())
    if can_manage_admins:
        kb.button(text="üë• –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã", callback_data=AdmCB(action="admins").pack())
    kb.adjust(1)
    return kb


def _roster_nav_kb_builder(page: int, has_prev: bool, has_next: bool) -> InlineKeyboardBuilder:
    """
    –ü–æ—Å—Ç—Ä–æ–∏—Ç–µ–ª—å –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ (–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç BUILDER, –∞ –Ω–µ markup).
    """
    kb = InlineKeyboardBuilder()
    row: list[InlineKeyboardButton] = []
    if has_prev:
        row.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=AdmCB(action="roster_page", value=str(page - 1)).pack()))
    if has_next:
        row.append(InlineKeyboardButton(text="–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è", callback_data=AdmCB(action="roster_page", value=str(page + 1)).pack()))
    row.append(InlineKeyboardButton(text="üè† –ú–µ–Ω—é", callback_data=AdmCB(action="menu").pack()))
    kb.row(*row)
    return kb


def _bl_nav_kb_builder(page: int, has_prev: bool, has_next: bool) -> InlineKeyboardBuilder:
    """–ù–∞–≤–∏–≥–∞—Ü–∏—è –¥–ª—è —á—ë—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞."""
    kb = InlineKeyboardBuilder()
    row: list[InlineKeyboardButton] = []
    if has_prev:
        row.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=AdmCB(action="bl_page", value=str(page - 1)).pack()))
    if has_next:
        row.append(InlineKeyboardButton(text="–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è", callback_data=AdmCB(action="bl_page", value=str(page + 1)).pack()))
    row.append(InlineKeyboardButton(text="üè† –ú–µ–Ω—é", callback_data=AdmCB(action="menu").pack()))
    kb.row(*row)
    return kb


def _admins_kb_builder() -> InlineKeyboardBuilder:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏ (BUILDER).
    """
    kb = InlineKeyboardBuilder()
    kb.button(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞", callback_data=AdmCB(action="admin_add").pack())
    kb.button(text="üóë –£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞", callback_data=AdmCB(action="admin_del").pack())
    kb.button(text="üè† –ú–µ–Ω—é", callback_data=AdmCB(action="menu").pack())
    kb.adjust(1)
    return kb


def _format_roster_line(n: int, slug: str) -> str:
    """
    –ö—Ä–∞—Å–∏–≤–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Ä–µ–µ—Å—Ç—Ä–∞, –µ—Å–ª–∏ slug —Ä–∞—Å–ø–∞—Ä—Å–∏–ª—Å—è.
    """
    try:
        p = parse_slug(slug)
        return (f"{n}) <code>{slug}</code>\n"
                f"   first={p.first}, last={p.last}, uni={p.university}, prog={p.program}, "
                f"group={p.group}, course={p.course}, year={p.startyear}")
    except Exception:
        return f"{n}) <code>{slug}</code>"


def _format_roster_page(page: int, total: int, slugs: list[tuple[int, str]]) -> str:
    """
    –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ä–µ–µ—Å—Ç—Ä–∞.
    """
    if not slugs:
        return "–ü—É—Å—Ç–æ."
    pages = max(1, (total + PAGE_SIZE - 1) // PAGE_SIZE)
    lines = [f"üìö –†–µ–µ—Å—Ç—Ä ‚Äî —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1}/{pages}\n"]
    for n, slug in slugs:
        lines.append(_format_roster_line(n, slug))
    return "\n".join(lines)


def _format_blacklist_page(page: int, total: int, rows: list) -> str:
    """–¢–µ–∫—Å—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã —á—ë—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞."""
    if total == 0:
        return "üö´ –ß—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç."
    pages = max(1, (total + PAGE_SIZE - 1) // PAGE_SIZE)
    lines = [f"üö´ –ß—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ ‚Äî —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1}/{pages}\n"]
    base_index = page * PAGE_SIZE
    for i, r in enumerate(rows, start=1):
        n = base_index + i
        reason = (r.reason or "‚Äî").strip()
        created = (r.created_at or "").strip()
        extra = f"  ‚Ä¢ added: {created}" if created else ""
        lines.append(f"{n}) <code>{r.user_id}</code> ‚Äî {reason}{extra}")
    return "\n".join(lines)


async def _safe_edit_or_answer(msg: Message, *, text: str, kb: InlineKeyboardBuilder) -> Message:
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç: –ø–æ–ø—ã—Ç–∞—Ç—å—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞,
    –∞ –µ—Å–ª–∏ Telegram –Ω–µ —Ä–∞–∑—Ä–µ—à–∞–µ—Ç ‚Äî –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ.
    """
    try:
        await msg.edit_text(text, parse_mode=ParseMode.HTML, reply_markup=kb.as_markup())
        return msg
    except TelegramBadRequest:
        new_msg = await msg.answer(text, parse_mode=ParseMode.HTML, reply_markup=kb.as_markup())
        return new_msg


# -------------------- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò --------------------

@router.message(Command("admin"))
async def cmd_admin(message: Message, session_maker: async_sessionmaker[AsyncSession]) -> None:
    """
    –í—Ö–æ–¥ –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é. –î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∞–º.
    """
    async with session_maker() as session:
        repo = Repo(session)
        admins = await _get_all_admin_ids(repo)
    if not _is_admin_cached(admins, message.from_user.id):
        await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return

    kb = _menu_kb(can_manage_admins=(message.from_user.id == MAIN_ADMIN_ID))
    await message.answer("–ê–¥–º–∏–Ω—Å–∫–∞—è –ø–∞–Ω–µ–ª—å. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb.as_markup())


@router.callback_query(AdmCB.filter(F.action == "menu"))
async def cb_menu(cb: CallbackQuery, session_maker: async_sessionmaker[AsyncSession]) -> None:
    """
    –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–æ—Ä–Ω–µ–≤–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∫–∏ (–ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤).
    """
    async with session_maker() as session:
        repo = Repo(session)
        admins = await _get_all_admin_ids(repo)
    if not _is_admin_cached(admins, cb.from_user.id):
        await cb.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return

    kb = _menu_kb(can_manage_admins=(cb.from_user.id == MAIN_ADMIN_ID))
    await cb.message.edit_text("–ê–¥–º–∏–Ω—Å–∫–∞—è –ø–∞–Ω–µ–ª—å. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb.as_markup())
    await cb.answer()


@router.callback_query(AdmCB.filter(F.action == "roster_page"))
async def cb_roster_page(
    cb: CallbackQuery,
    callback_data: AdmCB,
    session_maker: async_sessionmaker[AsyncSession],
) -> None:
    """
    –ü–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–µ–µ—Å—Ç—Ä–∞ (–ª–µ–∫—Å–∏–∫–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏ –ø–æ slug).
    """
    page = int(callback_data.value or 0)
    async with session_maker() as session:
        repo = Repo(session)
        admins = await _get_all_admin_ids(repo)
        if not _is_admin_cached(admins, cb.from_user.id):
            await cb.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
            return

        total = await repo.roster_count()
        rows = await repo.roster_page(page=page, page_size=PAGE_SIZE)

    base_index = page * PAGE_SIZE
    slugs = [(base_index + i + 1, r.slug) for i, r in enumerate(rows)]
    text = _format_roster_page(page, total, slugs)

    has_prev = page > 0
    has_next = (page + 1) * PAGE_SIZE < total

    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞: –ø–æ–¥ –∫–∞–∂–¥–æ–π –∑–∞–ø–∏—Å—å—é –∫–æ–º–ø–∞–∫—Ç–Ω—ã–µ –∫–Ω–æ–ø–∫–∏, –ø–ª—é—Å –Ω–∞–≤–∏–≥–∞—Ü–∏—è.
    kb = InlineKeyboardBuilder()
    for r in rows:
        kb.row(
            InlineKeyboardButton(text="‚úèÔ∏è", callback_data=AdmCB(action="roster_edit", value=str(r.id)).pack()),
            InlineKeyboardButton(text="üóë", callback_data=AdmCB(action="roster_del", value=str(r.id)).pack()),
            InlineKeyboardButton(text="¬∑", callback_data="noop"),
        )

    # –ù–∞–≤–∏–≥–∞—Ü–∏—è (BUILDER!) –∏ –ø—Ä–∏–∫—Ä–µ–ø–ª—è–µ–º –∫ kb
    nav = _roster_nav_kb_builder(page, has_prev, has_next)
    kb.attach(nav)

    await cb.message.edit_text(text, parse_mode=ParseMode.HTML, reply_markup=kb.as_markup())
    await cb.answer()


@router.callback_query(AdmCB.filter(F.action == "roster_add"))
async def cb_roster_add(cb: CallbackQuery, state: FSMContext, session_maker: async_sessionmaker[AsyncSession]) -> None:
    """
    –ó–∞–ø—Ä–æ—Å–∏—Ç—å —É –∞–¥–º–∏–Ω–∞ slug –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è.
    """
    async with session_maker() as session:
        repo = Repo(session)
        admins = await _get_all_admin_ids(repo)
    if not _is_admin_cached(admins, cb.from_user.id):
        await cb.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return

    await state.set_state(AdminStates.waiting_roster_slug)
    await cb.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ slug –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Ä–µ–µ—Å—Ç—Ä:\n"
        "<code>first-last-university-program-group-course-startyear</code>",
        parse_mode=ParseMode.HTML,
        reply_markup=None,
    )
    await cb.answer()


@router.message(AdminStates.waiting_roster_slug, NO_COMMAND, (F.text | F.caption))
async def on_roster_slug(
    message: Message,
    state: FSMContext,
    session_maker: async_sessionmaker[AsyncSession],
) -> None:
    """
    –ü—Ä–∏–Ω—è—Ç—å slug –∏ –¥–æ–±–∞–≤–∏—Ç—å –≤ —Ä–µ–µ—Å—Ç—Ä (–ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞).
    """
    async with session_maker() as session:
        repo = Repo(session)
        admins = await _get_all_admin_ids(repo)
    if not _is_admin_cached(admins, message.from_user.id):
        await state.clear()
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return

    raw = (message.text or "").strip()
    try:
        slug = normalize_slug(raw)
        parse_slug(slug)
    except Exception as e:
        await message.answer(f"–§–æ—Ä–º–∞—Ç –Ω–µ –ø—Ä–∏–Ω—è—Ç: {e}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ /admin –¥–ª—è –≤—ã—Ö–æ–¥–∞.")
        return

    async with session_maker() as session:
        repo = Repo(session)
        await repo.roster_add(slug)

    await state.clear()
    await message.answer("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ.\n\n–ù–∞–∂–º–∏—Ç–µ /admin —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é.")


@router.callback_query(AdmCB.filter(F.action == "roster_edit"))
async def cb_roster_edit(
    cb: CallbackQuery,
    callback_data: AdmCB,
    state: FSMContext,
    session_maker: async_sessionmaker[AsyncSession],
) -> None:
    """
    –ó–∞–ø—Ä–æ—Å–∏—Ç—å –Ω–æ–≤—ã–π slug –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∑–∞–ø–∏—Å–∏.
    """
    async with session_maker() as session:
        repo = Repo(session)
        admins = await _get_all_admin_ids(repo)
    if not _is_admin_cached(admins, cb.from_user.id):
        await cb.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return

    rid = int(callback_data.value or 0)
    async with session_maker() as session:
        repo = Repo(session)
        row = await repo.roster_get(rid)
    if not row:
        await cb.answer("–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return

    await state.set_state(AdminStates.waiting_edit_slug)
    await state.update_data(roster_id=rid)
    await cb.message.edit_text(
        f"–¢–µ–∫—É—â–∏–π slug:\n<code>{row.slug}</code>\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π slug:",
        parse_mode=ParseMode.HTML,
    )
    await cb.answer()


@router.message(AdminStates.waiting_edit_slug, NO_COMMAND, (F.text | F.caption))
async def on_roster_edit_slug(
    message: Message,
    state: FSMContext,
    session_maker: async_sessionmaker[AsyncSession],
) -> None:
    """
    –ü—Ä–∏–Ω—è—Ç—å –Ω–æ–≤—ã–π slug –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å.
    """
    async with session_maker() as session:
        repo = Repo(session)
        admins = await _get_all_admin_ids(repo)
    if not _is_admin_cached(admins, message.from_user.id):
        await state.clear()
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return

    data = await state.get_data()
    rid = int(data.get("roster_id") or 0)

    raw = (message.text or "").strip()
    try:
        slug = normalize_slug(raw)
        parse_slug(slug)
    except Exception as e:
        await message.answer(f"–§–æ—Ä–º–∞—Ç –Ω–µ –ø—Ä–∏–Ω—è—Ç: {e}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return

    async with session_maker() as session:
        repo = Repo(session)
        await repo.roster_update_slug(rid, slug)

    await state.clear()
    await message.answer("‚úÖ –ò–∑–º–µ–Ω–µ–Ω–æ. /admin")


@router.callback_query(AdmCB.filter(F.action == "roster_del"))
async def cb_roster_del(
    cb: CallbackQuery,
    callback_data: AdmCB,
    session_maker: async_sessionmaker[AsyncSession],
) -> None:
    """
    –£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å –∏–∑ —Ä–µ–µ—Å—Ç—Ä–∞.
    """
    async with session_maker() as session:
        repo = Repo(session)
        admins = await _get_all_admin_ids(repo)
    if not _is_admin_cached(admins, cb.from_user.id):
        await cb.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return

    rid = int(callback_data.value or 0)
    async with session_maker() as session:
        repo = Repo(session)
        await repo.roster_delete(rid)
    await cb.answer("–£–¥–∞–ª–µ–Ω–æ")
    await cb.message.answer("üóë –£–¥–∞–ª–µ–Ω–æ. /admin")


# -------------------- –ü–æ–∏—Å–∫ --------------------

@router.callback_query(AdmCB.filter(F.action == "search"))
async def cb_search(cb: CallbackQuery, state: FSMContext, session_maker: async_sessionmaker[AsyncSession]) -> None:
    """
    –ó–∞–ø—Ä–æ—Å–∏—Ç—å –ø–æ–∏—Å–∫–æ–≤—É—é —Å—Ç—Ä–æ–∫—É –ø–æ slug (–ª—é–±–æ–π —Ñ—Ä–∞–≥–º–µ–Ω—Ç).
    """
    async with session_maker() as session:
        repo = Repo(session)
        admins = await _get_all_admin_ids(repo)
    if not _is_admin_cached(admins, cb.from_user.id):
        await cb.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return

    await state.set_state(AdminStates.waiting_search_query)
    await state.update_data(search_page=0)
    await cb.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å (—Ñ—Ä–∞–≥–º–µ–Ω—Ç slug). –ü—Ä–∏–º–µ—Ä: <code>harward cse 77</code>",
        parse_mode=ParseMode.HTML,
    )
    await cb.answer()


async def _render_search_results(
    message: Message,
    query: str,
    page: int,
    session_maker: async_sessionmaker[AsyncSession],
) -> None:
    """
    –û—Ç—Ä–∏—Å–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞. –ë–µ–∑–æ–ø–∞—Å–Ω–æ: –µ—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–µ–ª—å–∑—è ‚Äî –æ—Ç–ø—Ä–∞–≤–∏–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
    """
    async with session_maker() as session:
        repo = Repo(session)
        total, rows = await repo.roster_search(query, page=page, page_size=PAGE_SIZE)

    base_index = page * PAGE_SIZE
    slugs = [(base_index + i + 1, r.slug) for i, r in enumerate(rows)]
    text = f"üîé –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É: <b>{query}</b>\n\n" + _format_roster_page(page, total, slugs)

    has_prev = page > 0
    has_next = (page + 1) * PAGE_SIZE < total

    kb = InlineKeyboardBuilder()
    for r in rows:
        kb.row(
            InlineKeyboardButton(text="‚úèÔ∏è", callback_data=AdmCB(action="roster_edit", value=str(r.id)).pack()),
            InlineKeyboardButton(text="üóë", callback_data=AdmCB(action="roster_del", value=str(r.id)).pack()),
            InlineKeyboardButton(text="¬∑", callback_data="noop"),
        )

    nav = InlineKeyboardBuilder()
    if has_prev:
        nav.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=AdmCB(action="search_page", value=str(page - 1)).pack())
    if has_next:
        nav.button(text="–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è", callback_data=AdmCB(action="search_page", value=str(page + 1)).pack())
    nav.button(text="üè† –ú–µ–Ω—é", callback_data=AdmCB(action="menu").pack())
    kb.attach(nav)

    await _safe_edit_or_answer(message, text=text, kb=kb)


@router.message(AdminStates.waiting_search_query, NO_COMMAND, (F.text | F.caption))
async def on_search_query(
    message: Message,
    state: FSMContext,
    session_maker: async_sessionmaker[AsyncSession],
) -> None:
    """
    –ü—Ä–∏–Ω—è—Ç—å —Å—Ç—Ä–æ–∫—É –ø–æ–∏—Å–∫–∞ –∏ –ø–æ–∫–∞–∑–∞—Ç—å –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.
    """
    async with session_maker() as session:
        repo = Repo(session)
        admins = await _get_all_admin_ids(repo)
    if not _is_admin_cached(admins, message.from_user.id):
        await state.clear()
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return

    q = (message.text or "").strip()
    if not q:
        await message.answer("–ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å. –í–≤–µ–¥–∏—Ç–µ —á—Ç–æ-–Ω–∏–±—É–¥—å –∏–ª–∏ /admin –¥–ª—è –≤—ã—Ö–æ–¥–∞.")
        return
    await state.update_data(search_query=q, search_page=0)
    await _render_search_results(message, q, 0, session_maker)


@router.callback_query(AdmCB.filter(F.action == "search_page"))
async def cb_search_page(
    cb: CallbackQuery,
    state: FSMContext,
    callback_data: AdmCB,
    session_maker: async_sessionmaker[AsyncSession],
) -> None:
    """
    –ü–∞–≥–∏–Ω–∞—Ü–∏—è –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –ø–æ–∏—Å–∫–∞.
    """
    async with session_maker() as session:
        repo = Repo(session)
        admins = await _get_all_admin_ids(repo)
    if not _is_admin_cached(admins, cb.from_user.id):
        await cb.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return

    data = await state.get_data()
    q = (data.get("search_query") or "").strip()
    page = int(callback_data.value or 0)
    await state.update_data(search_page=page)
    await _render_search_results(cb.message, q, page, session_maker)
    await cb.answer()


# -------------------- –ß–Å–†–ù–´–ô –°–ü–ò–°–û–ö --------------------

@router.callback_query(AdmCB.filter(F.action == "bl_page"))
async def cb_blacklist_page(
    cb: CallbackQuery,
    callback_data: AdmCB,
    session_maker: async_sessionmaker[AsyncSession],
) -> None:
    """
    –ü—Ä–æ—Å–º–æ—Ç—Ä —á—ë—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ (–ø–æ 20/—Å—Ç—Ä).
    """
    page = int(callback_data.value or 0)
    async with session_maker() as session:
        repo = Repo(session)
        admins = await _get_all_admin_ids(repo)
        if not _is_admin_cached(admins, cb.from_user.id):
            await cb.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
            return

        total = await repo.blacklist_count()
        rows = await repo.blacklist_page(page=page, page_size=PAGE_SIZE)

    text = _format_blacklist_page(page, total, rows)
    has_prev = page > 0
    has_next = (page + 1) * PAGE_SIZE < total

    kb = _bl_nav_kb_builder(page, has_prev, has_next)
    await cb.message.edit_text(text, parse_mode=ParseMode.HTML, reply_markup=kb.as_markup())
    await cb.answer()


# -------------------- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏ (—Ç–æ–ª—å–∫–æ –≥–ª–∞–≤–Ω—ã–π) --------------------

@router.callback_query(AdmCB.filter(F.action == "admins"))
async def cb_admins(
    cb: CallbackQuery,
    session_maker: async_sessionmaker[AsyncSession],
) -> None:
    """
    –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ –∏ –¥–µ–π—Å—Ç–≤–∏—è (—Ç–æ–ª—å–∫–æ –≥–ª–∞–≤–Ω—ã–π).
    """
    if cb.from_user.id != MAIN_ADMIN_ID:
        await cb.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
        return

    async with session_maker() as session:
        repo = Repo(session)
        rows = await repo.list_admins()

    static = set(getattr(settings, "ADMIN_USER_IDS", []) or [])
    static.add(MAIN_ADMIN_ID)
    db_ids = [r.user_id for r in rows]

    lines = ["üë• –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã:\n", f"‚Äî –ì–ª–∞–≤–Ω—ã–π: <code>{MAIN_ADMIN_ID}</code>"]
    statics = sorted(static - {MAIN_ADMIN_ID})
    if statics:
        lines.append("‚Äî –ò–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫: " + ", ".join(f"<code>{i}</code>" for i in statics))
    if db_ids:
        lines.append("‚Äî –ò–∑ –ë–î: " + ", ".join(f"<code>{i}</code>" for i in sorted(db_ids)))
    text = "\n".join(lines)

    kb = _admins_kb_builder()
    await cb.message.edit_text(text, parse_mode=ParseMode.HTML, reply_markup=kb.as_markup())
    await cb.answer()


@router.callback_query(AdmCB.filter(F.action == "admin_add"))
async def cb_admin_add(cb: CallbackQuery, state: FSMContext) -> None:
    """
    –ó–∞–ø—Ä–æ—Å user_id –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞ (—Ç–æ–ª—å–∫–æ –≥–ª–∞–≤–Ω—ã–π).
    """
    if cb.from_user.id != MAIN_ADMIN_ID:
        await cb.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
        return
    await state.set_state(AdminStates.waiting_admin_user_id)
    await cb.message.edit_text("–í–≤–µ–¥–∏—Ç–µ user_id –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã:", reply_markup=None)
    await cb.answer()


@router.message(AdminStates.waiting_admin_user_id, NO_COMMAND, (F.text | F.caption))
async def on_admin_add_user_id(
    message: Message,
    state: FSMContext,
    session_maker: async_sessionmaker[AsyncSession],
) -> None:
    """
    –ü—Ä–∏–Ω—è—Ç—å user_id –∏ –¥–æ–±–∞–≤–∏—Ç—å –≤ —Ç–∞–±–ª–∏—Ü—É –∞–¥–º–∏–Ω–æ–≤.
    """
    if message.from_user.id != MAIN_ADMIN_ID:
        await state.clear()
        await message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
        return

    try:
        uid = int((message.text or "").strip())
    except ValueError:
        await message.answer("–û–∂–∏–¥–∞–µ—Ç—Å—è —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ user_id. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return

    async with session_maker() as session:
        repo = Repo(session)
        await repo.add_admin(uid)

    await state.clear()
    await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {uid} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã. /admin")


@router.callback_query(AdmCB.filter(F.action == "admin_del"))
async def cb_admin_del(cb: CallbackQuery, state: FSMContext) -> None:
    """
    –ó–∞–ø—Ä–æ—Å user_id –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞ (—Ç–æ–ª—å–∫–æ –≥–ª–∞–≤–Ω—ã–π).
    """
    if cb.from_user.id != MAIN_ADMIN_ID:
        await cb.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
        return
    await state.set_state(AdminStates.waiting_admin_del_user_id)
    await cb.message.edit_text("–í–≤–µ–¥–∏—Ç–µ user_id –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:", reply_markup=None)
    await cb.answer()


@router.message(AdminStates.waiting_admin_del_user_id, NO_COMMAND, (F.text | F.caption))
async def on_admin_del_user_id(
    message: Message,
    state: FSMContext,
    session_maker: async_sessionmaker[AsyncSession],
) -> None:
    """
    –ü—Ä–∏–Ω—è—Ç—å user_id –∏ —É–¥–∞–ª–∏—Ç—å –∏–∑ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.
    """
    if message.from_user.id != MAIN_ADMIN_ID:
        await state.clear()
        await message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
        return

    try:
        uid = int((message.text or "").strip())
    except ValueError:
        await message.answer("–û–∂–∏–¥–∞–µ—Ç—Å—è —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ user_id. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return

    if uid == MAIN_ADMIN_ID:
        await message.answer("–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return

    async with session_maker() as session:
        repo = Repo(session)
        await repo.remove_admin(uid)

    await state.clear()
    await message.answer(f"üóë –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {uid} —É–¥–∞–ª—ë–Ω –∏–∑ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤. /admin")


# ---------- –ö–æ–º–∞–Ω–¥—ã –≤–æ –≤—Ä–µ–º—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π: —Å–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è + –ø—Ä–æ–±—Ä–æ—Å /stats ----------

@router.message(
    AdminStates.waiting_roster_slug, F.text.regexp(r"^\s*/")
)
@router.message(
    AdminStates.waiting_search_query, F.text.regexp(r"^\s*/")
)
@router.message(
    AdminStates.waiting_edit_slug, F.text.regexp(r"^\s*/")
)
@router.message(
    AdminStates.waiting_admin_user_id, F.text.regexp(r"^\s*/")
)
@router.message(
    AdminStates.waiting_admin_del_user_id, F.text.regexp(r"^\s*/")
)
async def admin_states_any_command(
    message: Message,
    state: FSMContext,
    session_maker: async_sessionmaker[AsyncSession],
) -> None:
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ ¬´—Å—ä–µ–¥–∞—Ç—å¬ª –∫–æ–º–∞–Ω–¥—ã
    await state.clear()
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—É –∏–∑ —Ç–µ–∫—Å—Ç–∞ (–ø–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ –±–µ–∑ "/" –∏ –±–µ–∑ "@bot_name")
    text = (message.text or "").strip()
    cmd = text.split()[0].lstrip("/").split("@")[0].lower() if text else ""

    if cmd == "stats":
        # –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –≤ —Ö–µ–Ω–¥–ª–µ—Ä –∫–∞—Ä–º—ã
        from bot.handlers.karma_auto import cmd_stats
        await cmd_stats(message, session_maker)  # type: ignore[arg-type]
        return

    # –ü–æ –¥—Ä—É–≥–∏–º –∫–æ–º–∞–Ω–¥–∞–º –ø—Ä–æ—Å—Ç–æ —Å–æ–æ–±—â–∏–º, —á—Ç–æ –≤–≤–æ–¥ –ø—Ä–µ—Ä–≤–∞–Ω
    await message.answer("‚èπÔ∏è –í–≤–æ–¥ –ø—Ä–µ—Ä–≤–∞–Ω. –ö–æ–º–∞–Ω–¥–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞. –ï—Å–ª–∏ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ ‚Äî –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—ë –µ—â—ë —Ä–∞–∑.")

async def _close_admin_request_message(cb: CallbackQuery, notice: str | None = None) -> None:
    """–°–ø—Ä—è—Ç–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É –∑–∞—è–≤–∫–∏ –≤ —á–∞—Ç–µ, –≥–¥–µ –Ω–∞–∂–∞–ª –∞–¥–º–∏–Ω."""
    deleted = False
    try:
        await cb.message.delete()
        deleted = True
    except Exception:
        pass

    if not deleted:
        with contextlib.suppress(Exception):
            if notice:
                await cb.message.edit_text(notice, reply_markup=None)
            else:
                await cb.message.edit_reply_markup(reply_markup=None)

    with contextlib.suppress(Exception):
        await cb.answer()

