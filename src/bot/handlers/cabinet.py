from __future__ import annotations
"""
–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç:
- –ö–∞—Ä—Ç–æ—á–∫–∞ —Å –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–µ–π (TOP/KARMA).
- ¬´–ù–∞–∑–∞–¥¬ª –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ —Ç–æ –∂–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –Ω–æ–≤–æ–µ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (–≥–æ—Å—Ç—å/–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å).
- –ü–æ–¥ –∫–∞—Ä—Ç–æ—á–∫–æ–π –¥—É–±–ª—å: –º–µ—Å—Ç–æ –≤ —Ç–æ–ø–µ, –∫–∞—Ä–º–∞, —Ç–µ–≥, –∞–π–¥–∏.
"""

import os
import contextlib

from aiogram import Router, F
from aiogram.enums import ParseMode
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, InputMediaPhoto
from aiogram.types.input_file import FSInputFile
from aiogram.exceptions import TelegramBadRequest
from aiogram.utils.keyboard import InlineKeyboardBuilder
from sqlalchemy.ext.asyncio import async_sessionmaker, AsyncSession

from bot.utils.repo import Repo
from bot.keyboards.common import CabCB, JoinCB
from bot.graphics.cabinet_card import render_cabinet_card
from bot.services.i18n import get_lang

router = Router(name="cabinet")

AFTER_LANG_BANNER = "./data/pls_afterchangelanguage_banner.png"
CABINET_CARD_TEMPLATE = "./data/profile_card_base.png"

_T = {
    "btn_profile": {"ru": "üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", "en": "üë§ Profile"},
    "btn_back": {"ru": "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "en": "‚¨ÖÔ∏è Back"},

    # –ø–æ–¥–ø–∏—Å–∏ –∫ –º–µ–Ω—é (—Ç–µ –∂–µ, —á—Ç–æ –∏ –≤ start.py)
    "menu_guest": {
        "ru": "<b>–ü—Ä–∏–≤–µ—Ç!</b>\n–¢—ã –≤ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–º –±–æ—Ç–µ <b>–ö–ª—É–±–∞ –õ—é–±–∏—Ç–µ–ª–µ–π –°–ª–∏–≤–æ–≤</b>. –ó–¥–µ—Å—å –¥–æ–±—Ä–æ –ø—Ä–µ–≤—Ä–∞—â–∞–µ—Ç—Å—è –≤ –∑–Ω–∞–Ω–∏—è ‚Äî –¥–µ–ª–∏–º—Å—è –∫–æ–Ω—Å–ø–µ–∫—Ç–∞–º–∏, —Ä–∞–∑–±–æ—Ä–∞–º–∏ –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.\n\n–ß—Ç–æ –≤—ã–±–∏—Ä–∞–µ–º —Å–µ–≥–æ–¥–Ω—è? üëá\n<i>–ü–æ–¥—Å–∫–∞–∑–∫–∞: –µ—Å–ª–∏ —Ç—ã –≤–ø–µ—Ä–≤—ã–µ –∑–¥–µ—Å—å ‚Äî –Ω–∞—á–Ω–∏ —Å üß≠ –ü—Ä–∞–≤–∏–ª–∞.\n–ú—ã –Ω–µ –ø–∏—Ä–∞—Ç—ã ‚Äî –º—ã –∞—Ä—Ö–∏–≤–∏—Å—Ç—ã —ç–Ω—Ç—É–∑–∏–∞–∑–º–∞.</i>",
        "en": "<b>Hi!</b>\nYou‚Äôre in the official bot of the <b>Plum Lovers Club</b>. Kindness turns into knowledge here ‚Äî we share notes, breakdowns, and support.\n\nWhat shall we choose today? üëá\n<i>Tip: if you‚Äôre new here ‚Äî start with üß≠ Rules.\nWe‚Äôre not pirates ‚Äî we‚Äôre archivists of enthusiasm.</i>",
    },
    "menu_user": {
        "ru": "<b>–ü—Ä–∏–≤–µ—Ç!</b>\n–¢—ã –≤ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–º –±–æ—Ç–µ <b>–ö–ª—É–±–∞ –õ—é–±–∏—Ç–µ–ª–µ–π –°–ª–∏–≤–æ–≤</b>. –ó–¥–µ—Å—å –¥–æ–±—Ä–æ –ø—Ä–µ–≤—Ä–∞—â–∞–µ—Ç—Å—è –≤ –∑–Ω–∞–Ω–∏—è ‚Äî –¥–µ–ª–∏–º—Å—è –∫–æ–Ω—Å–ø–µ–∫—Ç–∞–º–∏, —Ä–∞–∑–±–æ—Ä–∞–º–∏ –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.\n\n–ß—Ç–æ –≤—ã–±–∏—Ä–∞–µ–º —Å–µ–≥–æ–¥–Ω—è? üëá",
        "en": "<b>Hi!</b>\nYou‚Äôre in the official bot of the <b>Plum Lovers Club</b>. Kindness turns into knowledge here ‚Äî we share notes, breakdowns, and support.\n\nWhat shall we choose today? üëá",
    },
    "btn_rules":   {"ru": "üß≠ –ü—Ä–∞–≤–∏–ª–∞",       "en": "üß≠ Rules"},
    "btn_help":    {"ru": "‚ùì –ü–æ–º–æ—â—å",        "en": "‚ùì Help"},
    "btn_join":    {"ru": "üëâ –í—Å—Ç—É–ø–∏—Ç—å –≤ –ö–õ–°","en": "üëâ Join the club"},
    "btn_info":    {"ru": "üìó –ö–õ–° –∏–Ω—Ñ–æ",      "en": "üìó Club info"},
    "btn_profile": {"ru": "üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç","en": "üë§ Profile"},
    "btn_a2t":     {"ru": "üîä –ê—É–¥–∏–æ –≤ —Ç–µ–∫—Å—Ç", "en": "üîä Audio to text"},
    "btn_gpt":     {"ru": "‚ö° Chat GPT 5",    "en": "‚ö° Chat GPT 5"},
    "btn_settings":{"ru": "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏",     "en": "‚öôÔ∏è Settings"},
}

def _back_menu(lang: str) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text=_T["btn_back"][lang], callback_data=CabCB(action="back").pack())]]
    )

def _guest_menu_kb(lang: str) -> InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()
    kb.button(text=_T["btn_rules"][lang],   callback_data="start:rules:" + lang)
    kb.button(text=_T["btn_help"][lang],    callback_data="start:help:" + lang)
    kb.button(text=_T["btn_join"][lang],    callback_data=JoinCB(action="start").pack())
    kb.button(text=_T["btn_info"][lang],    callback_data="start:info:" + lang)
    kb.adjust(2, 2)
    return kb.as_markup()

def _user_menu_kb(lang: str) -> InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()
    kb.button(text=_T["btn_profile"][lang], callback_data=CabCB(action="open").pack())
    kb.button(text=_T["btn_rules"][lang],   callback_data="start:rules:" + lang)
    kb.button(text=_T["btn_a2t"][lang],     callback_data="start:a2t:"   + lang)
    kb.button(text=_T["btn_gpt"][lang],     callback_data="start:gpt:"   + lang)
    kb.button(text=_T["btn_help"][lang],    callback_data="start:help:"  + lang)
    kb.button(text=_T["btn_settings"][lang],callback_data="start:settings:" + lang)
    kb.adjust(2, 2, 2)
    return kb.as_markup()

async def _is_registered_and_ensure_profile(repo: Repo, user_id: int, username: str | None) -> bool:
    if await repo.profile_exists(user_id):
        return True
    app = await repo.get_last_application_for_user(user_id)
    if app and (app.status or "").lower() == "done":
        await repo.ensure_profile(user_id=user_id, username=username, slug=getattr(app, "slug", None))
        return True
    return False


@router.callback_query(CabCB.filter(F.action == "open"))
async def cb_open(c: CallbackQuery, session_maker: async_sessionmaker[AsyncSession]) -> None:
    async with session_maker() as s:
        repo = Repo(s)
        prof = await repo.get_profile(c.from_user.id)
        if not prof:
            await c.answer("Profile not found. Please register first.", show_alert=True)
            return
        rank = await repo.get_rank(c.from_user.id) or 0
        # –í–ê–ñ–ù–û: –±–µ—Ä—ë–º –∫–∞—Ä–º—É –∏–∑ repo.get_karma, –∞ –Ω–µ –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è
        karma = await repo.get_karma(c.from_user.id)

    lang = (get_lang(c.from_user.id) or "ru").lower()
    tmp_path = render_cabinet_card(
        CABINET_CARD_TEMPLATE,
        rank=rank,
        karma=karma,
        username=c.from_user.username,
        user_id=c.from_user.id,
        lang=lang,
    )

    # –¢–µ–∫—Å—Ç–æ–≤—ã–π –¥—É–±–ª—å –ø–æ–¥ –∫–∞—Ä—Ç–æ—á–∫–æ–π
    tag = f"@{c.from_user.username}" if c.from_user.username else "‚Äî"
    caption = (
        f"{_T['btn_profile'][lang]}\n\n"
        f"<b>–ú–µ—Å—Ç–æ –≤ —Ç–æ–ø–µ:</b> {rank if rank else '‚Äî'}\n"
        f"<b>–ö–∞—Ä–º–∞:</b> {karma}\n"
        f"<b>–¢–µ–≥:</b> {tag}\n"
        f"<b>–ê–π–¥–∏:</b> <code>{c.from_user.id}</code>"
    )

    try:
        media = InputMediaPhoto(media=FSInputFile(tmp_path), caption=caption, parse_mode=ParseMode.HTML)
        await c.message.edit_media(media=media, reply_markup=_back_menu(lang))
    except Exception:
        await c.message.answer_photo(photo=FSInputFile(tmp_path), caption=caption,
                                     parse_mode=ParseMode.HTML, reply_markup=_back_menu(lang))
    finally:
        with contextlib.suppress(Exception):
            os.remove(tmp_path)
    with contextlib.suppress(TelegramBadRequest):
        await c.answer()


@router.callback_query(CabCB.filter(F.action == "back"))
async def cb_back(c: CallbackQuery, session_maker: async_sessionmaker[AsyncSession]) -> None:
    lang = (get_lang(c.from_user.id) or "ru").lower()
    async with session_maker() as s:
        repo = Repo(s)
        is_reg = await _is_registered_and_ensure_profile(repo, c.from_user.id, c.from_user.username)

    caption = _T["menu_user"][lang] if is_reg else _T["menu_guest"][lang]
    kb = _user_menu_kb(lang) if is_reg else _guest_menu_kb(lang)
    media = InputMediaPhoto(media=FSInputFile(AFTER_LANG_BANNER), caption=caption, parse_mode=ParseMode.HTML)
    try:
        await c.message.edit_media(media=media, reply_markup=kb)
    except Exception:
        await c.message.answer_photo(photo=FSInputFile(AFTER_LANG_BANNER), caption=caption,
                                     parse_mode=ParseMode.HTML, reply_markup=kb)
        with contextlib.suppress(Exception):
            await c.message.delete()
    with contextlib.suppress(TelegramBadRequest):
        await c.answer()
