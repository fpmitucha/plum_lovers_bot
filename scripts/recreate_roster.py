"""
–ü–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É roster –ø–æ —Ç–µ–∫—É—â–µ–π –º–æ–¥–µ–ª–∏, —Å–æ—Ö—Ä–∞–Ω–∏–≤ –¥–∞–Ω–Ω—ã–µ (slug).
–ó–∞–ø—É—Å–∫ –∏–∑ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞ (bot_pls):
  export PYTHONPATH=$PWD/src
  source .venv/bin/activate
  python scripts/recreate_roster.py
"""

import asyncio
from sqlalchemy.ext.asyncio import create_async_engine
from sqlalchemy import text

from bot.config import settings
from bot.models.models import Roster

async def main():
    engine = create_async_engine(settings.DATABASE_URL, future=True)

    async with engine.begin() as conn:
        # –ü—Ä–æ–±—É–µ–º –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ç–µ–∫—É—â–∏–µ —Å–ª–æ–≥–∏ (–µ—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –µ—Å—Ç—å)
        slugs: list[str] = []
        try:
            res = await conn.execute(text("SELECT slug FROM roster;"))
            slugs = [row[0] for row in res.fetchall() if row[0]]
            print(f"–ù–∞–π–¥–µ–Ω–æ slug –≤ —Å—Ç–∞—Ä–æ–π —Ç–∞–±–ª–∏—Ü–µ: {len(slugs)}")
        except Exception:
            print("–°—Ç–∞—Ä–∞—è —Ç–∞–±–ª–∏—Ü–∞ roster –Ω–µ —á–∏—Ç–∞–µ—Ç—Å—è (–≤–æ–∑–º–æ–∂–Ω–æ, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ —Å –¥—Ä—É–≥–æ–π —Å—Ö–µ–º–æ–π). –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º.")

        # –î—Ä–æ–ø–∞–µ–º —Å—Ç–∞—Ä—É—é —Ç–∞–±–ª–∏—Ü—É
        await conn.execute(text("DROP TABLE IF EXISTS roster;"))
        # –°–æ–∑–¥–∞—ë–º –∑–∞–Ω–æ–≤–æ –ø–æ —Ç–µ–∫—É—â–µ–π –º–æ–¥–µ–ª–∏
        await conn.run_sync(Roster.__table__.create)
        print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ 'roster' —Å–æ–∑–¥–∞–Ω–∞ –∑–∞–Ω–æ–≤–æ.")

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ª–æ–≥–∏ (—É–Ω–∏–∫–∞–ª—å–Ω—ã–µ)
        if slugs:
            # –£–¥–∞–ª–∏–º –¥—É–±–ª–∏–∫–∞—Ç—ã, —Å–æ—Ö—Ä–∞–Ω–∏–≤ –ø–æ—Ä—è–¥–æ–∫
            seen = set()
            unique = []
            for s in slugs:
                if s not in seen:
                    seen.add(s)
                    unique.append(s)

            # –í—Å—Ç–∞–≤–∫–∞
            for s in unique:
                await conn.execute(text("INSERT INTO roster (slug) VALUES (:slug)"), {"slug": s})
            print(f"üîÅ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ slug: {len(unique)}")

    await engine.dispose()
    print("–ì–æ—Ç–æ–≤–æ.")

if __name__ == "__main__":
    asyncio.run(main())
